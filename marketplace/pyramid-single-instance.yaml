AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This workload template deploys a single instance of selected Pyramid processes.
  You will be billed for the AWS resources used if you create a stack from this template. 
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Instance configuration
        Parameters:
          - AMIID
          - Subnet
          - InstanceType
          - WorkloadSecurityGroups
          - AssignPublicIP
          - InstallProxy
      - Label:
          default: Pyramid instance configuration
        Parameters:
          - BaseStackName
          - PyramidProcess
          - InstancePurpose
          - RunOnce
          - DependencyValue
      - Label:
          default: Repository Database configuration
        Parameters:
          - RepositoryType
    ParameterLabels:
      BaseStackName:
        default: Base Stack this stack is a part of
      PyramidProcess:
        default: Pyramid processes to run
      InstancePurpose:
        default: Note on this instance's purpose
      WorkloadSecurityGroups:
        default: Security Groups for instances
      AMIID:
        default: Pyramid AMI Id
      Subnet:
        default: Subnet to run the instance in
      AssignPublicIP:
        default: Assign public IP and domain name
      RepositoryType:
        default: Using existing repository database, or creating new one
      InstanceType:
        default: Cluster instance type
      RunOnce:
        default: Run once and terminate
      DependencyValue:
        default: Unused. Only for dependency management in calling CFTs
      InstallProxy:
        default: Install nginx as a proxy to the Pyramid web server
Parameters:
  PyramidProcess:
    Description: >-
      For unattended installation.
    Type: String
    AllowedValues:
      - Everything
      - EverythingExceptInMemoryDB
      - Router
      - WebServer
      - WebServerAndRouter
      - RuntimeEngine
      - TaskEngine
      - RuntimeEngineAndTaskEngine
      - RuntimeEngineAndAI
      - TaskEngineAndAI
      - RuntimeAndTaskEngineAndAI
      - AIServer
      - InMemoryDB
      - Nothing
    Default: Everything
  BaseStackName:
    Description: Base StackName this stack is a part of
    Type: String
    MinLength: '1'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: Required
  InstancePurpose:
    Description: Free text note indicating instance's purpose.
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: Required
  AMIID:
    Description: AMI ID of the Pyramid AWS Workplace listing. Usually passed in from another template.
    Type: AWS::EC2::Image::Id
    ConstraintDescription: Required
  WorkloadSecurityGroups:
    Description: >-
      Security groups shared between Pyramid processes
    Type: CommaDelimitedList
    ConstraintDescription: Required
  RunOnce:
    Description: >-
      Run the instance start scripts and terminate.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  DependencyValue:
    Description: >-
      Unused. Only for dependency management in calling CFTs
    Type: String
    Default: ''
  InstallProxy:
    Description: >-
      Install nginx as a proxy to the Pyramid web server.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  Subnet:
    Description: >-
      ID of private subnet 1 in Availability Zone 1 for the Pyramid
      Servers (e.g., subnet-a0246dcd).
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: Required
  AssignPublicIP:
    Description: >-
      Assign public IP address and domain.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  InstanceType:
    Description: >-
      Amazon EC2 instance type for the Pyramid instances.
      Has to be available for the deployment region.
    Type: String
    AllowedValues:
      - t3.2xlarge
      - t3a.2xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.12xlarge
      - c5a.16xlarge
      - c5a.24xlarge
      - c5ad.2xlarge
      - c5ad.4xlarge
      - c5ad.8xlarge
      - c5ad.12xlarge
      - c5ad.16xlarge
      - c5ad.24xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.12xlarge
      - c5d.18xlarge
      - c5d.24xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.8xlarge
      - m5ad.12xlarge
      - m5ad.16xlarge
      - m5ad.24xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - m5dn.2xlarge
      - m5dn.4xlarge
      - m5dn.8xlarge
      - m5dn.12xlarge
      - m5dn.16xlarge
      - m5dn.24xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - m5n.16xlarge
      - m5n.24xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.8xlarge
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - r5ad.2xlarge
      - r5ad.4xlarge
      - r5ad.8xlarge
      - r5ad.12xlarge
      - r5ad.16xlarge
      - r5ad.24xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - r5dn.2xlarge
      - r5dn.4xlarge
      - r5dn.8xlarge
      - r5dn.12xlarge
      - r5dn.16xlarge
      - r5dn.24xlarge
      - r5n.2xlarge
      - r5n.4xlarge
      - r5n.8xlarge
      - r5n.12xlarge
      - r5n.16xlarge
      - r5n.24xlarge
      - t3.2xlarge
      - t3a.2xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
    Default: c5.2xlarge
    MinLength: '1'
    ConstraintDescription: Must contain valid instance type.
  RepositoryType:
    Description: >-
      Creating or using a local or remote repository.
    Type: String
    AllowedValues:
      - currentremote
      - newremote
      - reuseremote
    Default: currentremote
    ConstraintDescription: Must contain newremote, currentremote or reuseremote.
Conditions:
  TerminateInstance: !Equals
   - !Ref RunOnce
   - 'true'
  InstallNginx: !Equals
   - !Ref InstallProxy
   - 'true'
  AssignPublicIPCondition: !Equals
   - !Ref AssignPublicIP
   - 'true'

Resources:
  InstanceWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstanceWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Handle: !Ref InstanceWaitHandle
      # 30 mins
      Timeout: '1800'
      Count: 1

  PyramidInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - InstallPyramid
            - !If
              - InstallNginx
              - StartNginx
              - !Ref 'AWS::NoValue'
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent

        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.PyramidInstance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource PyramidInstance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service

        # Definition of json configuration of AmazonCloudWatchAgent
        02_config-amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/cfn-init.log",
                            "log_group_name": "/pyramid/${BaseStackName}",
                            "log_stream_name": "{instance_id}-${InstancePurpose}/cf-init",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          },
                           {
                            "file_path": "/tmp/*.log",
                            "log_group_name": "/pyramid/${BaseStackName}",
                            "log_stream_name": "{instance_id}-${InstancePurpose}/installers",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          },
                          {
                            "file_path": "/opt/Pyramid/log/*.log",
                            "log_group_name": "/pyramid/${BaseStackName}",
                            "log_stream_name": "{instance_id}-${InstancePurpose}/pyramid-logs",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

        InstallPyramid:
          commands:
            1-generate-unattended-install-settings:
              test: "ls /usr/src/pyramid/*.run"
              command: !Join
                - ' '
                - - '/usr/src/pyramid/unattended-install-settings.sh'
                  - !Ref BaseStackName
                  - !Ref RepositoryType
                  - !Ref PyramidProcess
              ignoreErrors: 'false'
            2-install:
              test: "ls /usr/src/pyramid/*.run"
              cwd: /usr/src/pyramid
              command: "for i in Pyramid*.run; do /usr/src/pyramid/$i --mode unattended --optionfile /usr/src/pyramid/pyramid-unattended-install.ini; done"
              ignoreErrors: 'false'
            3-cleanup:
              test: "ls /usr/src/pyramid/pyramid-unattended-install.ini"
              command: "rm /usr/src/pyramid/pyramid-unattended-install.ini && rm -f /tmp/pyr*.log && rm -f /tmp/bit*.log"
              ignoreErrors: 'false'
            4-mount-shared-fs:
              command: !Join
                - ' '
                - - '/usr/src/pyramid/mnt-efs.sh --mountPoint /mnt/pyramid'
                  - '--baseStackName'
                  - !Ref BaseStackName
                  - '--efsRootDirectory /shared'
              ignoreErrors: 'false'
            5-mount-IMDB-fs:
              test: !Join
                - ''
                - - '[[ ''Everything,InMemoryDB'' == *"'
                  - !Ref PyramidProcess
                  - '"* ]]'
              command: !Join
                - ' '
                - - '/usr/src/pyramid/mnt-imdb.sh'
                  - '--mountPoint /mnt/pyramid-imdb'
                  - '--baseStackName'
                  - !Ref BaseStackName
                  - '--currentStackName'
                  - !Ref 'AWS::StackName'
                  - '--initialize true'
              ignoreErrors: 'false'

        StartNginx:
          files:
            /etc/nginx/default.d/proxy.conf:
              content: |
                location / {
                  proxy_pass http://127.0.0.1:8181;
                  client_max_body_size 50M;
                }
                location /events {
                  proxy_pass http://127.0.0.1:8181/events;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  client_max_body_size 50M;
                }
              mode: '000755'
              owner: root
              group: root

          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/nginx/default.d/proxy.conf
    Properties:
      ImageId: !Ref AMIID
      KeyName: !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/KeyPairName:1}}'
      IamInstanceProfile: !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/PyramidInstanceProfile:1}}'
      InstanceType: !Ref InstanceType
      SecurityGroupIds: !If
        - AssignPublicIPCondition
        - !Ref 'AWS::NoValue'
        - !Ref WorkloadSecurityGroups
      SubnetId: !If
        - AssignPublicIPCondition
        - !Ref 'AWS::NoValue'
        - !Ref Subnet
      InstanceInitiatedShutdownBehavior: !If
        - TerminateInstance
        - terminate
        - stop
      Monitoring: false
      DisableApiTermination: false
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs: 
            VolumeSize: 20
      NetworkInterfaces: !If
        - AssignPublicIPCondition
        - -
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: '0'
            GroupSet: !Ref WorkloadSecurityGroups
            SubnetId: !Ref Subnet
        - !Ref 'AWS::NoValue'
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              Content-Type: multipart/mixed; boundary="//"
              MIME-Version: 1.0
              --//
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"

              #cloud-config
              cloud_final_modules:
              - [scripts-user, always]

              --//
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="userdata.txt"

              #!/bin/bash -xe

              # run cfn-init

            - '/opt/aws/bin/cfn-init -v  --configsets default --stack '
            - !Ref 'AWS::StackName'
            - ' --resource PyramidInstance --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init

            - '/opt/aws/bin/cfn-signal -e $? '
            - !Base64
              Ref: InstanceWaitHandle
            - |+

            - |
              # If asked, halt and catch fire

            - 'if [ '''
            - !Ref RunOnce
            - ''' = ''true'' ] ; then /sbin/halt -p; fi'
            - |+

            - '--//'
            - |+

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: Vendor
          Value: Pyramid
        - Key: StackName
          Value: !Sub '${BaseStackName}'
        - Key: Contents
          Value: !Sub '${InstancePurpose}'

Outputs:
  PublicDNSName:
    Value: !If
      - AssignPublicIPCondition
      - !GetAtt PyramidInstance.PublicDnsName
      - ''
    Description: Instance Public DNS name
  PrivateDNSName:
    Value: !GetAtt PyramidInstance.PrivateDnsName
    Description: Instance Private DNS name


  DependencyValue:
    Description: "An output to make a dependency"
    Value: !Ref DependencyValue
