AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Backs up a Pyramid deployment - repository database and EFS file systems - to S3.
  Based on a Pyramid AWS Marketplace AMI.
  Logs output to the base stack CloudWatch log group.
  This stack can be deleted afterwards, as the S3 bucket is retained.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Backup configuration
        Parameters:
          - BaseStackName
          - BucketName
          - BucketFolder
      - Label:
          default: Instance configuration
        Parameters:
          - Subnet
          - InstanceType
          - KeyPairName
          - BackupVolumeSize
          - RunOnce
    ParameterLabels:
      BucketName:
        default: Bucket to backup to. Optional - if left blank, a new bucket will be created.
      BucketFolder:
        default: Optional. Folder within bucket to backup to. Date-timestamp folder will be created under this.
      BaseStackName:
        default: Base Stack of the Pyramuid deployment to be backed up
      KeyPairName:
        default: Key pair name
      Subnet:
        default: Subnet within the deployment VPC to run the instance in
      InstanceType:
        default: Cluster instance type
      RunOnce:
        default: Run once and terminate
Parameters:
  BaseStackName:
    Description: Base StackName to backup
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: Required
  BucketName:
    Description: Bucket to backup to
    Type: String
    Default: ''
    MaxLength: '64'
    AllowedPattern: '[-a-z0-9]*'
    ConstraintDescription: Optional. If entered, requires lowercase alphanumeric and '-'
  BucketFolder:
    Description: Folder within bucket to backup to. Date-timestamp folder will be created under this.
    Type: String
    MaxLength: '64'
    AllowedPattern: '[-_a-zA-Z0-9/=]*'
    ConstraintDescription: Optional
  RunOnce:
    Description: >-
      Run the instance start scripts and terminate.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  KeyPairName:
    Description: >-
      Name of an existing EC2 key pair, which allows you to securely connect to
      your instance after it launches.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Required
  Subnet:
    Description: >-
      Subnet within the VPC of the Pyramid deployment
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: Required
  InstanceType:
    Description: >-
      Amazon EC2 instance type for the Pyramid instances.
      Has to be available for the deployment region.
    Type: String
    AllowedValues:
      - m5.2xlarge
      - m5.4xlarge
      - m5a.2xlarge
      - m5a.4xlarge
    Default: m5.2xlarge
    MinLength: '1'
    ConstraintDescription: Must contain valid instance type.
  BackupVolumeSize:
    Description: >-
      GB of disk for instance. Used to backup repository database.
    Type: Number
    Default: 20
    ConstraintDescription: Required
Mappings:
  AWSAMIRegionMap:
    us-east-1:
      # 2020.13.100
      '64': ami-029d57f27fac5962a
    us-east-2:
      '64': XXX
    us-west-1:
      '64': XXX
    us-west-2:
      '64': XXX
    ca-central-1:
      '64': XXX
    eu-central-1:
      '64': XXX
    eu-west-1:
      '64': XXX
    eu-west-2:
      '64': XXX
    eu-west-3:
      '64': XXX
    eu-north-1:
      '64': XXX
    ap-southeast-1:
      '64': XXX
    ap-southeast-2:
      '64': XXX
    ap-south-1:
      '64': XXX
    ap-northeast-1:
      '64': XXX
    ap-northeast-2:
      '64': XXX
    sa-east-1:
      '64': XXX
    us-gov-east-1:
      '64': XXX
    us-gov-west-1:
      '64': XXX
Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not 
          - 'Fn::EachMemberEquals':
              - 'Fn::RefAll': 'AWS::EC2::KeyPair::KeyName'
              - ''
        AssertDescription: All key pair parameters must not be empty
Conditions:
  CreateS3Bucket: !Equals
   - !Ref BucketName
   - ''
  IncludeBucketFolder: !Not
    - !Equals
      - !Ref BucketFolder
      - ''
  TerminateInstance: !Equals
   - !Ref RunOnce
   - 'true'

Resources:
  InstanceWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstanceWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Handle: !Ref InstanceWaitHandle
      # 30 mins
      Timeout: '1800'
      Count: 1

  ValueFunc:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var r = require('cfn-response');
          var m = new Date();
          var dateString =
              m.getUTCFullYear() + "-" +
              ("0" + (m.getUTCMonth()+1)).slice(-2) + "-" +
              ("0" + m.getUTCDate()).slice(-2) + "-" +
              ("0" + m.getUTCHours()).slice(-2) + "-" +
              ("0" + m.getUTCMinutes()).slice(-2) + "-" +
              ("0" + m.getUTCSeconds()).slice(-2);
          exports.handler = function(ev, ctx) {
            ev.ResourceProperties.Time = dateString;
            r.send(ev, ctx, r.SUCCESS, ev.ResourceProperties);
          }; 
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 30
      Role: !GetAtt ValueFunctionExecutionRole.Arn

  ValueFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: { Service: [ lambda.amazonaws.com ] }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            Fn::Sub: "value-custom-res-${AWS::StackName}-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action: cloudformation:DescribeStacks
                Resource: "arn:aws:cloudformation:*:*:*"

  GetTimeThisTime:
    Type: Custom::Value
    Properties:
      ServiceToken: !GetAtt ValueFunc.Arn

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Condition: CreateS3Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
    DeletionPolicy: Retain

  # BackupManagedPolicy:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Sid: S3
  #           Effect: Allow
  #           Action:
  #             - 's3:*'
  #           Resource:
  #             - !Join
  #               - ''
  #               - - 'arn:'
  #                 - !Ref 'AWS::Partition'
  #                 - ':s3:::'
  #                 - !If
  #                   - CreateS3Bucket
  #                   - !Ref S3Bucket
  #                   - !Ref BucketName
  #                 - '/*'
  #         - Sid: InstanceLogs
  #           Effect: Allow
  #           Action:
  #             - 'logs:CreateLogGroup'
  #             - 'logs:CreateLogStream'
  #             - 'logs:DescribeLogStreams'
  #             - 'logs:PutLogEvents'
  #           Resource:
  #             - !Sub >-
  #               arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:pyramid/${BaseStackName}
  #             - !Sub >-
  #               arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:pyramid/${BaseStackName}:log-stream:*
        # Statement:
        #   - Sid: ManageSharedFileSystemMountTargets
        #     Effect: Allow
        #     Action:
        #       - 'elasticfilesystem:DescribeMountTargets'
        #       - 'elasticfilesystem:CreateMountTarget'
        #     Resource:
        #       - !Sub >-
        #         arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${SharedFileSystem}

  BackupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: PyramidPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3
                Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:'
                      - !Ref 'AWS::Partition'
                      - ':s3:::'
                      - !If
                        - CreateS3Bucket
                        - !Ref S3Bucket
                        - !Ref BucketName
                      - '/*'
              - Sid: InstanceLogs
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:pyramid/${BaseStackName}
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:pyramid/${BaseStackName}:log-stream:*

  BackupInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref BackupRole

  PyramidInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - EnableAmazonLinuxExtraPackages
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - BackupPyramid
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent

        EnableAmazonLinuxExtraPackages:
          packages:
            yum:
              amazon-efs-utils: []
              amazon-cloudwatch-agent: []
          commands:
            enable_nginx_R_EPEL:
              command: "amazon-linux-extras enable epel postgresql10 && yum clean metadata"

        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.PyramidInstance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource PyramidInstance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service

        # Definition of json configuration of AmazonCloudWatchAgent
        02_config-amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/cfn-ini*.log",
                            "log_group_name": "pyramid/${BaseStackName}",
                            "log_stream_name": "{instance_id}-backup/cf-init",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

        BackupPyramid:
          packages:
            yum:
              # installed with EFS
              # nfs-utils: []
              postgresql: []
              
          files:
            /usr/src/pyramid/backup-to-s3:
              content: |
                #!/bin/bash
                label=$1
                baseStackName=$2
                subnet=$3
                mtSecurityGroup=$4
                sharedFileSystemEFS=$5
                region=$6
                bucketName=$7
                bucketFolder=${8:-}

                set -o errexit

                /usr/src/pyramid/mnt-efs-helper-imdb.sh \
                    --mode mountOnly --subnet $subnet \
                    --securityGroup $mtSecurityGroup \
                    --efsId $sharedFileSystemEFS \
                    --region $region

                rdsAddress=`aws ssm get-parameter --name "/Pyramid/$baseStackName/RepositoryDatabaseAddress" --region $region --output text | cut -f 7`
                rdsPort=`aws ssm get-parameter --name "/Pyramid/$baseStackName/RepositoryDatabasePort" --region $region --output text | cut -f 7`
                rdsName=`aws ssm get-parameter --name "/Pyramid/$baseStackName/RepositoryDatabaseName" --region $region --output text | cut -f 7`
                rdsUsername=`aws ssm get-parameter --name "/Pyramid/$baseStackName/RepositoryDatabaseUsername" --region $region --output text | cut -f 7`

                rdsPassword=`aws secretsmanager get-secret-value --secret-id /Pyramid/$baseStackName/RepositoryDatabasePassword --region $region --output text | cut -f 4`

                if [ ! -d /mnt/pyramid/repoBackup ] ; then
                  mkdir -p /mnt/pyramid/repoBackup
                fi
                echo "backing up $rdsName on service $rdsAddress"
                # dump the repository into the shared file system
                export PGPASSWORD=$rdsPassword
                pg_dump -F c -U $rdsUsername -h $rdsAddress -p $rdsPort $rdsName > "/mnt/pyramid/repoBackup/$baseStackName-repository-$label.dump"

                # catch the 2020-13 release approach of having an EFS volume per IMDB
                # dump each IMDB file system to s3
                ssmParams=`aws ssm get-parameters-by-path --path "/Pyramid/$baseStackName" --recursive --region $region --output text`
                # looking for SSM parameters of the forms:
                #    '/Pyramid/$baseStackName/${AWS::StackName}/IMDBFileSystem'
                while read line ; do
                  # name is cut -f 1
                  name=`echo $line | cut -d " " -f 5`
                  endPortion=`echo $name | cut -d '/' -f 5`

                  # echo "<$name> **** <$endPortion>"
                  if [[ "${endPortion}" == "IMDBFileSystem" ]] ; then
                    # value is cut -f 3
                    fileSystemId=`echo $line | cut -d " " -f 7`
                    # echo "fileSystemId - $fileSystemId"
                    /usr/src/pyramid/mnt-efs-helper-imdb.sh \
                      --mode mountOnly \
                      --mountPoint /mnt/pyramid-imdb/$fileSystemId \
                      --subnet $subnet \
                      --securityGroup $mtSecurityGroup \
                      --efsId $fileSystemId \
                      --region $region

                    mkdir -p /mnt/pyramid/imdb/$fileSystemId
                    echo "copying $fileSystemId to $sharedFileSystemEFS /imdb/$fileSystemId"
                    cp -p -R /mnt/pyramid-imdb/$fileSystemId/. /mnt/pyramid/imdb/$fileSystemId
                    umount /mnt/pyramid-imdb/$fileSystemId
                    rm -rf /mnt/pyramid-imdb/$fileSystemId
                  fi
                done <<< "$ssmParams"

                if [ ! -z "${bucketFolder}"] ; then
                  s3Destination="s3://$bucketName/$bucketFolder/$label"
                else
                  s3Destination="s3://$bucketName/$label"
                fi
                echo "Synching to $s3Destination"
                # dump the shared file system to s3
                aws s3 sync --no-progress /mnt/pyramid/ $s3Destination

                # remove the repo dump from the
                rm -rf /mnt/pyramid/repoBackup/$baseStackName-repository-$label.dump
                umount /mnt/pyramid
                rm -rf /mnt/pyramid

              mode: '000755'
              owner: root
              group: root
          commands:
            1-execute-backup:
              # backup-to-s3 \
              #   2020-11-13-15-00-00 \
              #   Pyr-v8 \
              #   subnet-01892aa0ff74872e0 \
              #   sg-0ecfc9a157ede67dd \
              #   fs-ec548f19 \
              #   us-east-1 \
              #   pyr-v8-backup-s3bucket-17f7k5buabvbh
              command: !Join
                - ' '
                - - /usr/src/pyramid/backup-to-s3
                  - !GetAtt GetTimeThisTime.Time
                  - !Sub '${BaseStackName}'
                  - !Sub '${Subnet}'
                  - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/MountTargetSecurityGroup:1}}'
                  - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/SharedFileSystem:1}}'
                  - !Sub '${AWS::Region}'
                  - !If
                    - CreateS3Bucket
                    - !Ref S3Bucket
                    - !Ref BucketName
                  - !If
                    - IncludeBucketFolder
                    - !Ref BucketFolder
                    - !Ref AWS::NoValue
              ignoreErrors: 'false'

    Properties:
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - '64'
      KeyName: !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/KeyPairName:1}}'
      IamInstanceProfile: !Ref BackupInstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/PyramidProcessesSecurityGroup:1}}'
        - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/MountTargetSecurityGroup:1}}'
      # SecurityGroupIds: !Join
      #   - ','
      #   - - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/PyramidProcessesSecurityGroup:1}}'
      #     - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/MountTargetSecurityGroup:1}}'
      SubnetId: !Ref Subnet
      InstanceInitiatedShutdownBehavior: !If
        - TerminateInstance
        - terminate
        - stop
      Monitoring: false
      DisableApiTermination: false
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs: 
            VolumeSize: !Ref BackupVolumeSize
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              Content-Type: multipart/mixed; boundary="//"
              MIME-Version: 1.0
              --//
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"
              #cloud-config
              cloud_final_modules:
              [scripts-user, always]
              --//
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="userdata.txt"
              #!/bin/bash -xe

              # run cfn-init

            - '/opt/aws/bin/cfn-init -v  --configsets default --stack '
            - !Ref 'AWS::StackName'
            - ' --resource PyramidInstance --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init

            - '/opt/aws/bin/cfn-signal -e $? '
            - !Base64
              Ref: InstanceWaitHandle
            - |+

            - |
              # If asked, halt and catch fire

            - 'if [ '''
            - !Ref RunOnce
            - ''' = ''true'' ] ; then /sbin/halt -p; fi'
            - |+

            - ''
            - |+

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: Vendor
          Value: Pyramid
        - Key: StackName
          Value: !Sub '${BaseStackName}'
        - Key: Contents
          Value: Backup

Outputs:
  BackupBucket:
    Description: Backup Bucket
    Value: !If
      - CreateS3Bucket
      - !Ref S3Bucket
      - !Ref BucketName

  BackupPath:
    Description: Full backup S3 path
    Value: !Join
      - ''
      - - !If
          - CreateS3Bucket
          - !Ref S3Bucket
          - !Ref BucketName
        - !If
          - IncludeBucketFolder
          - !Sub "/${BucketFolder}/"
          - '/'
        - !GetAtt GetTimeThisTime.Time

