AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Deploys a single instance of Pyramid 2020 with all services and a new Aurora
  Postgres cluster for the repository database. Option to restore from a Pyramid backup.
  To be deployed in a public subnet, as the Pyramid web server is available on port 80.
  You will be billed for the AWS resources used if you create a stack from this template. 
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Pyramid Analytics Instance
        Parameters:
          - VPCID
          - Subnet
          - InstanceType
          - KeyPairName
          - AssignPublicIP
          - HTTPAccessCIDR
          - AllowSSHSecurityGroup
          - InitialUsername
          - InitialUserPassword
      - Label:
          default: New Repository Database Service
        Parameters:
          - RDSAddress
          - NewRDSServiceMode
          - NewRDSSubnets
          - RDSPort
          - RDSUser
          - RDSPassword
          - RDSName
          - BackupS3BucketAndFolder
    ParameterLabels:
      KeyPairName:
        default: Key pair name
      VPCID:
        default: VPC ID
      Subnet:
        default: Subnet for Pyramid instance
      InstanceType:
        default: Instance type
      AssignPublicIP:
        default: Assign public IP and domain name
      HTTPAccessCIDR:
        default: HTTP/HTTPS CIDR
      AllowSSHSecurityGroup:
        default: SSH Security Group ID
      RDSAddress:
        default: New PostgreSQL RDS Cluster name
      NewRDSServiceMode:
        default: New RDS service mode
      NewRDSSubnets:
        default: >-
          New RDS service subnets
      RDSPort:
        default: RDS database port
      RDSUser:
        default: RDS database user name
      RDSPassword:
        default: RDS database password
      RDSName:
        default: Repository database name
      InitialUsername:
        default: Initial Pyramid user name
      InitialUserPassword:
        default: Initial Pyramid User password
      BackupS3BucketAndFolder:
        default: S3 path to a Pyramid backup
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair for SSH connections.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Required
  VPCID:
    Description: ID of your existing VPC for deployment.
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: Required
  Subnet:
    Description: Subnet for instance. Accessible by HTTP/S from browsers.
    Type: 'AWS::EC2::Subnet::Id'
  InstanceType:
    Description: >-
      Amazon EC2 instance type for the Pyramid instance. Has to be available for
      the deployment region.
    Type: String
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - c5.12xlarge
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.12xlarge
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.8xlarge
      - c5n.12xlarge
    Default: c5.4xlarge
    ConstraintDescription: Must be a valid instance type for region.
  AssignPublicIP:
    Description: >-
      Assign public IP address and domain.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  HTTPAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: >-
      Allowed CIDR block for HTTP and HTTPS traffic. Please set CIDR to
      x.x.x.x/32 to allow one specific IP address access, 0.0.0.0/0 to allow all
      IP addresses access, or another CIDR range.
    Type: String
    MinLength: '9'
  AllowSSHSecurityGroup:
    Description: >-
      Optional. ID of the security group (e.g. sg-0fec99734449e8888) to allow SSH access into the instance ie. Bastion
      access.
    Type: String
    Default: ''
    MaxLength: '128'
    AllowedPattern: '^$|sg-[a-f0-9]{6,17}$'
  RDSAddress:
    Description: >-
      Cluster name of new PostgreSQL RDS service (ie. pyramid)
    Type: String
    MinLength: '5'
    MaxLength: '128'
    AllowedPattern: '[a-zA-Z][-_a-zA-Z0-9]*'
    ConstraintDescription: >-
      Min 5 characters. First character must be a letter. Must contain only letters, digits, '-' or underscores.
  NewRDSServiceMode:
    Description: Database Engine Mode
    Type: String
    Default: serverless
    AllowedValues:
      - serverless
      - provisioned
  NewRDSSubnets:
    Description: Subnets to deploy the new PostgreSQL RDS cluster into.  At least 2 must be entered, even when using existing
          service.
    Type: 'List<AWS::EC2::Subnet::Id>'
    ConstraintDescription: Required
  RDSUser:
    Description: >-
      Master user name for the RDS database. Min 5 characters. It can contain
      only alphanumeric characters and underscores.
    Type: String
    MinLength: '5'
    MaxLength: '64'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: >-
      Min 5 characters. Can contain only alphanumeric characters, minus and
      underscores.
  RDSPassword:
    Description: >-
      Master password for the RDS database. Min 8 characters. Can contain only
      alphanumeric characters, minus and underscores.
    Type: String
    MinLength: '8'
    MaxLength: '64'
    NoEcho: 'true'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: >-
      Min 8 characters. Can contain only alphanumeric characters, minus and
      underscores.
  RDSPort:
    Description: RDS Port
    Type: Number
    Default: '5432'
    MinValue: '1024'
    ConstraintDescription: Port number must be higher than 1024
  RDSName:
    Description: Repository database name in the RDS service.
    Type: String
    Default: pyramid
    MinLength: '6'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][-_a-zA-Z0-9]*'
    ConstraintDescription: >-
      Min 6 characters. Must begin with a letter and contain only alphanumeric
      characters, minus and underscores.
  InitialUsername:
    ConstraintDescription: >-
      Min 5 characters. Must begin with a letter and contain only alphanumeric
      characters.
    Default: admin
    Description: The Pyramid initial username.
    MaxLength: '16'
    MinLength: '5'
    Type: String
    AllowedPattern: '^[a-zA-Z][-_a-zA-Z0-9]*$'
  InitialUserPassword:
    AllowedPattern: '^(?=^.{8,255}$)[a-zA-Z][-_a-zA-Z0-9]*$'
    ConstraintDescription: >-
      Min 8 characters. Must begin with a letter and contain only alphanumeric
      characters, minus and underscore.
    Description: >-
      The Pyramid initial user password. Min 8 characters. Must begin with a
      letter and contain only alphanumeric characters, minus and underscore.
    MaxLength: '64'
    MinLength: '8'
    NoEcho: 'True'
    Type: String
  BackupS3BucketAndFolder:
    Description: >-
      S3 path to a Pyramid backup
    Type: String
    Default: ''
    MaxLength: '1000'
    AllowedPattern: '^$|^(?=^.{5,255}$)[-_a-zA-Z0-9/\=()]*$'
    ConstraintDescription: >-
      Optional. Otherwise min 5 characters. First character must be a letter. Must contain only letters, digits, '/', '-', '_', '=', '*' or parentheses.
Mappings:
  AWSAMIRegionMap:
    us-east-1:
      '64': ami-041118ae556bd4576
    us-east-2:
      '64': ami-08e9488997b77008b
    us-west-1:
      '64': ami-08bbf85446b9b8bae
    us-west-2:
      '64': ami-066d2df7eab59c767
    ca-central-1:
      '64': ami-038edeb82d485e2ff
    eu-central-1:
      '64': ami-05c20822282b54536
    eu-west-1:
      '64': ami-043f5b68498932e5a
    eu-west-2:
      '64': ami-0547b6b43ce929de7
    eu-west-3:
      '64': ami-0ef703c1dadffd700
    eu-north-1:
      '64': ami-0c1a149f26940fbfe
    ap-southeast-1:
      '64': ami-03e8d4d808297f489
    ap-southeast-2:
      '64': ami-0a6f958aa6ada9f8b
    ap-south-1:
      '64': ami-046a4e4da7b3f87e6
    ap-northeast-1:
      '64': ami-0e5a1925d67036bd4
    ap-northeast-2:
      '64': ami-0e0e72548265415a7
    sa-east-1:
      '64': ami-0a151507bd48d0202
    us-gov-east-1:
      '64': ami-032ee6cd41acc8161
    us-gov-west-1:
      '64': ami-0cf6eaad451cc77af
Rules:
  SubnetsNotEmpty:
    Assertions:
      - Assert: !Not 
          - 'Fn::EachMemberEquals':
              - 'Fn::RefAll': 'AWS::EC2::Subnet::Id'
              - ''
        AssertDescription: All subnet parameters must not be empty
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not 
          - 'Fn::EachMemberEquals':
              - 'Fn::RefAll': 'AWS::EC2::KeyPair::KeyName'
              - ''
        AssertDescription: All key pair parameters must not be empty
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must be in the same VPC

Conditions:
  PublicIP: !Equals
    - !Ref AssignPublicIP
    - 'true'

Resources:

  CidrOfVpcRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  CidrOfVpcLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3

          from botocore.exceptions import ClientError

          from urllib.parse import urlencode

          from urllib.request import urlopen, Request, HTTPError, URLError

          import json

          def send_response(event, context, response_status, reason=None,
          response_data={}):
              body = {
                  "Status": response_status,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"],
                  "LogicalResourceId": event["LogicalResourceId"],
              }

              print("Responding: {}".format(response_status))

              if reason:
                  print(reason)
                  body["Reason"] = reason

              if response_data:
                  print(response_data)
                  body["Data"] = response_data

              body = json.dumps(body).encode("utf-8")

              req = Request(event["ResponseURL"], data=body, headers={
                  "Content-Length": len(body),
                  "Content-Type": "",
              })
              req.get_method = lambda: "PUT"

              try:
                  urlopen(req)
                  return True
              except HTTPError as e:
                  print("Failed executing HTTP request: {}".format(e.code))
                  return False
              except URLError as e:
                  print("Failed to reach the server: {}".format(e.reason))
                  return False

          def get_VPC_CIDR(VpcId, Region):
              try:
                  ec2 = boto3.resource("ec2", region_name=Region)
              except ClientError as e:
                  return {
                  "StatusCode" : 400,
                  "Message" : e.response['Error']['Message']
              }
              try:
                  vpc = ec2.Vpc(VpcId)
              except ClientError as e:
                  return {
                  "StatusCode" : 400,
                  "Message" : e.response['Error']['Message']
              }

              print(f"REQUEST for VPC {VpcId}")
              try:
                  cidr = vpc.cidr_block
              except ClientError as e:
                  return {
                  "StatusCode" : 400,
                  "Message" : e.response['Error']['Message']
              }
                  
              if cidr is None:
                  return {
                      "StatusCode" : 400,
                      "Message" : "No CIDR returned"
                  }

              return {
                  "StatusCode" : 200,
                  "VpcId" : VpcId,
                  "Region" : Region,
                  "CidrBlock" : cidr,
                  "Message" : "OK"
              }

          def handler(event, context):
              print("RECEIVED")
              print(event)
              print(event.get("RequestType"))
              #print
              if event.get("RequestType") == "Delete":
                  return send_response(event, context, "SUCCESS")
              
              requestProperties = event.get("ResourceProperties")
              vpc_id = requestProperties.get("VpcId")
              region = requestProperties.get("Region")
                  
              print(f"VpcId: {vpc_id}, Region: {region}")
              answer = get_VPC_CIDR(vpc_id, region)
              print(answer)

              if answer["StatusCode"] == 400:
                  print(f"FAILED: {answer['Message']}")
                  return send_response(event, context, "FAILED", reason=answer["Message"])

              print(f"SUCCESS: {answer['CidrBlock']}")
              return send_response(event, context, "SUCCESS", response_data={
                      "CidrBlock": answer["CidrBlock"]
                  }
              )
              
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt CidrOfVpcRole.Arn
  
  CidrOfVpc:
    Type: 'Custom::CidrOfVpcLambda'
    Properties:
      ServiceToken: !GetAtt CidrOfVpcLambda.Arn
      VpcId: !Ref VPCID
      Region: !Ref 'AWS::Region'

  CreateRepositoryDatabaseService:
    Type: 'AWS::CloudFormation::Stack'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: >-
        https://pyramid-cloudformation.s3.amazonaws.com/marketplace/2020-14/pyramid-aurora-postgres.yaml
      Parameters:
        VPCID: !Ref VPCID
        SubnetIds: !Join 
          - ','
          - !Ref NewRDSSubnets
        DBAccessCIDR: !GetAtt CidrOfVpc.CidrBlock
        ClusterName: !Ref RDSAddress
        DBEngineMode: !Ref NewRDSServiceMode
        DBPort: !Ref RDSPort
        DBMasterUsername: !Ref RDSUser
        DBMasterUserPassword: !Ref RDSPassword

  CentralInstance:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: >-
        https://pyramid-cloudformation.s3.amazonaws.com/marketplace/2020-14/pyramid-central-instance.yaml
      Parameters:
        AMIID: !FindInMap 
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - '64'
        BaseStackName: !Ref 'AWS::StackName'
        InstanceType: !Ref InstanceType
        VPCID: !Ref VPCID
        Subnet: !Ref Subnet
        VPCCIDR: !GetAtt CidrOfVpc.CidrBlock
        KeyPairName: !Ref KeyPairName
        AssignPublicIP: !Ref AssignPublicIP
        HTTPAccessCIDR: !Ref HTTPAccessCIDR
        AllowSSHSecurityGroup: !Ref AllowSSHSecurityGroup
        InitialUsername: !Ref InitialUsername
        InitialUserPassword: !Ref InitialUserPassword
        RDSAddress: !GetAtt CreateRepositoryDatabaseService.Outputs.RDSEndPointAddress
        RDSPort: !Ref RDSPort
        RDSName: !Ref RDSName
        RDSUser: !Ref RDSUser
        RDSPassword: !Ref RDSPassword
        InitializeRepository: true
        BackupS3BucketAndFolder: !Ref BackupS3BucketAndFolder

Outputs:
  PyramidPublicURL:
    Value: !If
      - PublicIP
      - !Join
        - ''
        - - 'http://'
          - !GetAtt CentralInstance.Outputs.PublicDNSName
      - 'No public URL'
    Description: Pyramid Public URL
  PrivateDNSName:
    Value: !GetAtt CentralInstance.Outputs.PrivateDNSName
    Description: Instance Private DNS name
  PublicDNSName:
    Value: !GetAtt CentralInstance.Outputs.PublicDNSName
    Description: Instance Public DNS name
  VPC:
    Value: !Ref VPCID
    Description: VPC for deployment
  KeyPairName:
    Value: !Ref KeyPairName
    Description: Key Pair for instances
  PyramidProcessesSecurityGroup:
    Value: !GetAtt CentralInstance.Outputs.PyramidProcessesSecurityGroup
    Description: Security Group for Pyramid instances' internal communication
  PyramidRole:
    Value: !GetAtt CentralInstance.Outputs.PyramidRole
    Description: IAM Role for instances launched from this stack
  PyramidInstanceProfile:
    Value: !GetAtt CentralInstance.Outputs.PyramidInstanceProfile
    Description: IAM Instance Profile for instances launched from this stack
  MountTargetSecurityGroup:
    Value: !GetAtt CentralInstance.Outputs.MountTargetSecurityGroup
    Description: Security Group for EFS Mount Targets
  SharedFileSystem:
    Value: !GetAtt CentralInstance.Outputs.SharedFileSystem
    Description: EFS file system ID for the shared file system across the deployment
  RepositoryDatabaseAddress:
    Value: !GetAtt CreateRepositoryDatabaseService.Outputs.RDSEndPointAddress
    Description: Repository database address
  RepositoryDatabasePort:
    Value: !Ref RDSPort
    Description: Repository database port
  RepositoryDatabaseUsername:
    Value: !Ref RDSUser
    Description: Repository database user name
  RepositoryDatabasePasswordARN:
    Value: !GetAtt CentralInstance.Outputs.RepositoryDatabasePasswordARN
    Description: RDS Password in Secrets Manager
  RepositoryDatabaseName:
    Value: !Ref RDSName
    Description: Repository database schema name
  InitialUsername:
    Value: !Ref InitialUsername
    Description: Initial Pyramid user name
  InitialUserPassword:
    Value: !Ref InitialUserPassword
    Description: Initial Pyramid user password
  RDSSecurityGroup:
    Value: !GetAtt CreateRepositoryDatabaseService.Outputs.RDSSecurityGroup
    Description: Security Group access to repository
