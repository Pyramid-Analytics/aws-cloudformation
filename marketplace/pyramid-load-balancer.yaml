AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This workload template deploys an Application Load Balancer, 2 (Everything - IMDB)
  instances and an IMDB instance. Because we are launching from AWS Marketplace AMIs,
  which are limited to Standard Edition, we need to launch from a Central instance that
  has had an Enterprise license deployed to it.

  Central instance first, then run this template to add on.
  Kill Central instance. What if there are add on instances?
  Copy Resoources, SSM and Secrets?

  Nah! need a way to add the license in as part of the initialization of the cluster!

  2 Everything - IMDB: auto-scaled, ALB
  1 IMDB

  Am able to restore a backup on creation.

  **WARNING** This template creates EC2 instances and related
  resources. You will be billed for the AWS resources used if you create a stack
  from this template. (qs-1puat849f)
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Common instance configuration
        Parameters:
          - BaseStackName
          - WebInstance
      - Label:
          default: Load Balancer configuration
        Parameters:
          - VPCID
          - LoadBalancerSubnets
          - LoadBalancerInternetFacing
          - LoadBalancerPublic
          - CertificateArn
    ParameterLabels:
      BaseStackName:
        default: CloudFormation stack to attach to
      VPCID:
        default: VPC ID
      WebInstance:
        default: Instance Id to add into the load balancer
      LoadBalancerSubnets:
        default: Load balancer subnets
      LoadBalancerPublic:
        default: Load Balancer Available on Public Internet?
      LoadBalancerInternetFacing:
        default: Is the load balancer exposed to the public internet?
      CertificateArn:
        default: ARN of cerificate for HTTPS

Parameters:
  BaseStackName:
    Description: Base StackName this stack is a part of
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: Required
  WebInstance:
    Description: Instance Id to add into the load balancer
    Type: String
    MinLength: '19'
    MaxLength: '19'
    AllowedPattern: 'i-[a-f0-9]{17}'
    ConstraintDescription: Required
    # i-0e0b874783b89a4d9
  VPCID:
    Description: ID of your existing VPC for deployment.
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: Required
  LoadBalancerSubnets:
    Description: >-
      Subnets for load balancer
    Type: CommaDelimitedList
  LoadBalancerInternetFacing:
    Description: >-
      Load Balancer is exposed to public Internet
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  CertificateArn:
    Description: >-
      (Optional) ARN of cerificate for HTTPS
    Type: String

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the same VPC
Conditions:
  LoadBalancerIsInternet: !Equals
    - !Ref LoadBalancerInternetFacing
    - 'true'
  ImplementHTTPS: !Not
    - !Equals
      - !Ref CertificateArn
      - ''
  HTTPOnly: !Equals
    - !Ref CertificateArn
    - ''

Resources:

  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !Ref LoadBalancerSubnets
      SecurityGroups:
        - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/LoadBalancerAccessSecurityGroup:1}}'
      Type: application
      Scheme: !If
        - LoadBalancerIsInternet
        - 'internet-facing' 
        - 'internal'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '600'

  ELBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    # DependsOn: ElasticLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: '200,302'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
      - Id: !Ref WebInstance
      VpcId: !Ref VPCID

  HTTPOnlyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: HTTPOnly
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup


  HTTPToHTTPSListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: ImplementHTTPS
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: '#{host}'
            Path:  '/#{path}'
            Query: '#{query}'
            StatusCode: 'HTTP_301'

  HTTPSListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Condition: ImplementHTTPS
      Properties:
          LoadBalancerArn: !Ref ElasticLoadBalancer
          Port: 443
          Protocol: HTTPS
          SslPolicy: "ELBSecurityPolicy-2016-08"
          Certificates: 
            - 
              CertificateArn:  !Ref CertificateArn
          # arn:aws:acm:***AWS region***:**************:certificate/*********************
              
          DefaultActions: 
            - 
              Order: 1
              TargetGroupArn: !Ref ELBTargetGroup
              Type: "forward"

  # WebEngineIngress:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   Properties:
  #     GroupId: !GetAtt
  #       - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/PyramidProcessesSecurityGroup:1}}'
  #       - GroupId
  #     IpProtocol: tcp
  #     FromPort: 80
  #     ToPort: 80
  #     SourceSecurityGroupId: !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/WebAccessSecurityGroup:1}}'


  LoadBalancerSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${BaseStackName}/LoadBalancer'
      Type: String
      Value: !Ref ElasticLoadBalancer
      Description: Load balancer ARN
      Tags:
        StackName: !Ref BaseStackName
        Vendor: Pyramid

  WebTargetGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${BaseStackName}/WebTargetGroup'
      Type: String
      Value: !Ref ELBTargetGroup
      Description: Target group for web server instances
      Tags:
        StackName: !Ref BaseStackName
        Vendor: Pyramid

  ManageTargetsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ManageTargetsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ManageTargetsPolicy
                Effect: Allow
                Action:
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInternetGateways'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcs'
                Resource:
                  - !Ref ELBTargetGroup
                  # - !Sub >-
                  #   arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${ExistingFileSystemId}
# arn:aws:elasticloadbalancing:us-east-1:343272018671:targetgroup/palo-reganalytics/c3a7a68961bc07c0

  ManageTargetsLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          from botocore.exceptions import ClientError

          def add_instance_to_target_group(event, _):
              
              targetGroupArn = event['ResourceProperties']['TargetGroupArn']
              ec2InstanceId = event['ResourceProperties']['InstanceId']
              
              client = boto3.client('elbv2')

              # # get existing targets

              # response = client.describe_target_health(
              #     TargetGroupArn=targetGroupArn,
              # )
              try:
                  response = client.register_targets(
                      TargetGroupArn = targetGroupArn,
                      Targets=[
                          {
                              'Id': ec2InstanceId,
                          },
                      ]
                  )

                  return {
                      "Status" : True,
                      "Message" : response
                  }

              except ClientError as e:
                  print(e)
                  return {
                        "Status" : False,
                        "Message" :  e.response['Error']['Message']
                  }

          def handler(event, context):
              print(event)
              answer={}
              if event.get("RequestType") == "Delete":
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData=answer)
              else:
                  answer = add_instance_to_target_group(event, context)
                  if answer["Status"] == True:
                      responseStatus = cfnresponse.SUCCESS
                  else:
                      responseStatus = cfnresponse.FAILED
                  cfnresponse.send(event, context, responseStatus, responseData=answer)


      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt ManageTargetsRole.Arn


  ManageTargetsLambdaArnSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${BaseStackName}/ManageTargetsLambdaArn'
      Type: String
      Value: !GetAtt ManageTargetsLambda.Arn
      Description: ARN pof Lambda to manage target group instances
      Tags:
        StackName: !Ref BaseStackName
        Vendor: Pyramid

Outputs:
  PyramidPublicURL:
    Value: !Join 
      - ''
      - - 'http'
        - !If
          - ImplementHTTPS
          - 's' 
          - ''
        - '://'
        - !GetAtt 
          - ElasticLoadBalancer
          - DNSName
    Description: Pyramid Public URL through load balancer
  PrivateDNSName:
    Value: !GetAtt 
          - ElasticLoadBalancer
          - DNSName
    Description: Load balancer private DNS name
  VPC:
    Value: !Ref VPCID
    Description: VPC for deployment

