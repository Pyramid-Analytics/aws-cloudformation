AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This workload template deploys a single Windows instance of the Windows Connector (DNC).
  A default Windows AMI is launched and a Pyramid installer is downloaded.
  You will be billed for the AWS resources used if you create a stack from this template. 
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Instance configuration
        Parameters:
          - AMIID
          - Subnet
          - InstanceType
          - WorkloadSecurityGroups
      - Label:
          default: Pyramid instance configuration
        Parameters:
          - BaseStackName
          - PyramidProcess
      - Label:
          default: Repository Database configuration
        Parameters:
          - RepositoryType
    ParameterLabels:
      BaseStackName:
        default: Base Stack this stack is a part of
      PyramidProcess:
        default: Pyramid processes to run
      InstancePurpose:
        default: Note on this instance's purpose
      WorkloadSecurityGroups:
        default: Security Groups for instances
      AMIID:
        default: Pyramid AMI Id
      Subnet:
        default: Subnet to run the instance in
      AssignPublicIP:
        default: Assign public IP and domain name
      RepositoryType:
        default: Using existing repository database, or creating new one
      InstanceType:
        default: Cluster instance type
      RunOnce:
        default: Run once and terminate
      BackupS3BucketAndFolder:
        default: S3 bucket and optional path to a Pyramid backup
      InstallProxy:
        default: Install nginx as a proxy to the Pyramid web server
Parameters:
  LatestWindowsAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-Base'
    Description: SSM Parameter for Latest Windows 2019 Datacenter AMI
  WindowsPyramidInstallerURL:
    Description: Download of a Pyramid Windows installer
    Type: String
    MinLength: '1'
  # PyramidProcess:
  #   Description: >-
  #     For unattended installation.
  #   Type: String
  #   AllowedValues:
  #     - Everything
  #     - Router
  #     - WebServer
  #     - WebServerAndRouter
  #     - RuntimeEngine
  #     - TaskEngine
  #     - RuntimeEngineAndTaskEngine
  #     - RuntimeEngineAndAI
  #     - TaskEngineAndAI
  #     - RuntimeAndTaskEngineAndAI
  #     - AIServer
  #     - InMemoryDB
  #     - Nothing
  #   Default: Everything
  BaseStackName:
    Description: Base StackName this stack is a part of
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: Required
  InstancePurpose:
    Description: Free text note indicating instance's purpose.
    Type: String
    Default: WindowsConnector
    MinLength: '1'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: Required
  # WorkloadSecurityGroups:
  #   Description: >-
  #     Security groups shared between Pyramid processes
  #   Type: CommaDelimitedList
  #   ConstraintDescription: Required
  RunOnce:
    Description: >-
      Run the instance start scripts and terminate.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  Subnet:
    Description: >-
      ID of private subnet 1 in Availability Zone 1 for the Pyramid
      Servers (e.g., subnet-a0246dcd).
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: Required
  InstanceType:
    Description: >-
      Amazon EC2 instance type for the Pyramid instances.
      Has to be available for the deployment region.
    Type: String
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5n.large
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.12xlarge
      - c5a.large
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.12xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
    Default: c5.2xlarge
    MinLength: '1'
    ConstraintDescription: Must contain valid instance type.
Conditions:
  TerminateInstance: !Equals
   - !Ref RunOnce
   - 'true'

Resources:
  InstanceWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstanceWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Handle: !Ref InstanceWaitHandle
      # 30 mins
      Timeout: '1800'
      Count: 1

  PyramidInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - 01_setupCfnHupAndCloudWatchAgent
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - InstallPyramid
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent

        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHupAndCloudWatchAgent:
          files:
            c:\\cfn\\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}

            c:\\cfn\\hooks.d\\cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - '[cfn-auto-reloader-hook]'
                  - |+

                  - triggers=post.update
                  - |+

                  - path=Resources.PyramidInstance.Metadata.AWS::CloudFormation::Init
                  - |+

                  - 'action=cfn-init.exe -v --stack='
                  - !Ref 'AWS::StackId'
                  - ' --resource=PyramidInstance'
                  - ' --configsets=UpdateEnvironment'
                  - ' --region='
                  - !Ref 'AWS::Region'
                  - |+

            C:\\PyramidInstall\\AmazonCloudWatchAgent.msi:
              source: https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi

          commands:
            1-install-cloudwatch:
              command: C:\\PyramidInstall\\AmazonCloudWatchAgent.msi

          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: 
                  - c:\\cfn\\cfn-hup.conf
                  - c:\\cfn\\hooks.d\\cfn-auto-reloader.conf

        # Definition of json configuration of AmazonCloudWatchAgent
        02_config-amazon-cloudwatch-agent:
          files:
            "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json":
              content: !Sub |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/cfn-init.log",
                            "log_group_name": "/pyramid/${BaseStackName}",
                            "log_stream_name": "{instance_id}-${InstancePurpose}/cf-init",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          },
                           {
                            "file_path": "/tmp/*.log",
                            "log_group_name": "/pyramid/${BaseStackName}",
                            "log_stream_name": "{instance_id}-${InstancePurpose}/installers",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          },
                          {
                            "file_path": "/opt/Pyramid/log/*.log",
                            "log_group_name": "/pyramid/${BaseStackName}",
                            "log_stream_name": "{instance_id}-${InstancePurpose}/pyramid-logs",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          }
                        ]
                      }
                    }
                  }
                }

        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
            02_start_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"

        InstallPyramid:
          files:
            "C:\\PyramidInstall\\PyramidWindowsInstaller.exe":
              source: !Ref WindowsPyramidInstallerURL

            "C:\\PyramidInstall\\unattended-install-settings.ps1":
              content: 
                param ($baseStackName, $processes="WindowsConnector", $rdsType="PostgreSQL")

                Write-Host "baseStackName=$baseStackName"
                Write-Host "processes=<$processes>"

                # 
                # - - 'unattended-install-settings.ps1'
                #   - !Ref WindowsInstallerURL
                #   - !Ref BaseStackName
                #   - !Ref RepositoryType
                #   - !Ref PyramidProcess

                # given what you want to deploy, what processes do you want to exclude?
                $ProcessesToExclude = @{}
                $ProcessesToExclude["Router"] = "winws,winrte,winte,winimdb,winai,windesktop,windnc"
                $ProcessesToExclude["WebServer"] = "winrte,winte,winrtr,winimdb,winai,windesktop,windnc"
                $ProcessesToExclude["WebServerAndRouter"] = "winrte,winte,winimdb,winai,windesktop,windnc"
                $ProcessesToExclude["RuntimeEngine"] = "winws,winte,winrtr,winimdb,winai,windesktop,windnc"
                $ProcessesToExclude["TaskEngine"] = "winws,winrte,winrtr,winimdb,winai,windesktop,windnc"
                $ProcessesToExclude["RuntimeEngineAndTaskEngine"] = "winws,winrtr,winimdb,winai,windesktop,windnc"
                $ProcessesToExclude["RuntimeEngineAndAI"] = "winws,winte,winrtr,winimdb,windesktop,windnc"
                $ProcessesToExclude["TaskEngineAndAI"] = "winws,winrte,winrtr,winimdb,windesktop,windnc"
                $ProcessesToExclude["RuntimeAndTaskEngineAndAI"] = "winws,winrtr,winimdb,windesktop,windnc"
                $ProcessesToExclude["AIServer"] = "winws,winrte,winte,winrtr,winimdb,windeskto,windnc"
                $ProcessesToExclude["InMemoryDB"] = "winws,winrte,winte,winrtr,winai,windesktop,windnc"
                $ProcessesToExclude["Nothing"] = "winws,winrte,winte,winrtr,winimdb,winai,windesktop,windnc"
                $ProcessesToExclude["EverythingExceptInMemoryDB"] = "winimdb,windesktop"
                $ProcessesToExclude["WindowsConnector"] = "winws,winrte,winte,winrtr,winimdb,winai,windesktop"
                # only Everything installs the desktop
                $ProcessesToExclude["Everything"] = ""


                try {
                  # rdsType=`aws ssm get-parameter --name "/Pyramid/$baseStackName/RepositoryDatabaseType" --region $region --output text | cut -f 7`
                  $rdsType = ( Get-SSMParameter -Name /Pyramid/$baseStackName/RepositoryDatabaseType ).Value
                }
                catch {
                  if  ( $rdsType -eq "" ) {
                    $rdsType = "PostgreSQL"
                  }
                }


                $rdsAddress = ( Get-SSMParameter -Name /Pyramid/$baseStackName/RepositoryDatabaseAddress ).Value
                $rdsPort = ( Get-SSMParameter -Name /Pyramid/$baseStackName/RepositoryDatabasePort ).Value
                $rdsName = ( Get-SSMParameter -Name /Pyramid/$baseStackName/RepositoryDatabaseName ).Value
                $rdsUsername = ( Get-SSMParameter -Name /Pyramid/$baseStackName/RepositoryDatabaseUsername ).Value

                $rdsPassword = ( Get-SECSecretValue -SecretId /Pyramid/$baseStackName/RepositoryDatabasePassword ).SecretString

                $initialUsername = ( Get-SSMParameter -Name /Pyramid/$baseStackName/InitialUsername ).Value

                $initialUserPassword = ( Get-SECSecretValue -SecretId /Pyramid/$baseStackName/InitialUserPassword ).SecretString

                switch ( $rdsType )
                {
                    "PostgreSQL" {
                      $databasePrefix = "postgreSql"
                      $databaseLocation = "pgLocation"
                      $databaseType = "0"
                    }
                    "MicrosoftSQLServer" {
                      $databasePrefix = "mssql"
                      $databaseLocation = "msLocation"
                      $databaseType = "1"
                    }
                    default {
                      Write-Host "invalid database type <$rdsType>"
                      exit 1
                    }
                }

                Write-Host "databasePrefix = <$databasePrefix>"

                $disableComponentsProperty=""
                if  ( -not ( "$processes" -eq "Everything") ) {
                  $disableComponentsProperty="disable-components=$($ProcessesToExclude.$processes)"
                }

                $preamble = @"
                install-location=$env:ProgramFiles\Pyramid
                data-location=$env:ProgramFiles\Pyramid\repository

                $disableComponentsProperty

                installation-type=1
                selectCurrentRepository=$databaseType
                repositoryChoice=currentremote
                $databaseLocation=0
                initUserName=$initialUsername
                initUserPassword=$initialUserPassword
                "@

                $iniFile = "C:\PyramidInstall\pyramid-unattended-install.ini"
                Set-Content -Path $iniFile -Value $preamble

                Add-Content -Path $iniFile -Value $("{0}Host={1}" -f $databasePrefix, $rdsAddress)
                Add-Content -Path $iniFile -Value $("{0}Port={1}" -f $databasePrefix, $rdsPort)
                Add-Content -Path $iniFile -Value $("{0}Db={1}" -f $databasePrefix, $rdsName)
                Add-Content -Path $iniFile -Value $("{0}Username={1}" -f $databasePrefix, $rdsUsername)
                Add-Content -Path $iniFile -Value $("{0}UserPassword={1}" -f $databasePrefix, $rdsPassword)

          commands:
            0-disable-windows-defender-firewall:
              command: netsh advfirewall set allprofiles state off
            1-generate-unattended-install-settings:
              command: !Join
                - ' '
                - - 'c:\\PyramidInstall\\unattended-install-settings.ps1'
                  - !Ref BaseStackName
                  - !Ref PyramidProcess
              ignoreErrors: 'false'
            2-install:
              command: "c:\\PyramidInstall\\PyramidWindowsInstaller.exe --mode unattended --optionfile c:\\PyramidInstall\\pyramid-unattended-install.ini"
              ignoreErrors: 'false'
            3-cleanup:
              command: "rm -rf C:\\PyramidInstall && rm -f /tmp/pyr*.log && rm -f /tmp/bit*.log"
              ignoreErrors: 'false'
            # 4-mount-shared-fs:
            #   command: !Join
            #     - ' '
            #     - - '/usr/src/pyramid/mnt-efs.sh --mountPoint /mnt/pyramid --subnet'
            #       -  !Ref Subnet
            #       - '--baseStackName'
            #       - !Ref BaseStackName
            #       - '--efsRootDirectory /shared'
            #       - '--region'
            #       - !Ref AWS::Region
            #   ignoreErrors: 'false'

    Properties:
      ImageId: !Ref AMIID
      KeyName: !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/KeyPairName:1}}'
      IamInstanceProfile: !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/PyramidInstanceProfile:1}}'
      InstanceType: !Ref InstanceType
      SecurityGroupIds: !Ref WorkloadSecurityGroups
      SubnetId: !Ref Subnet
      InstanceInitiatedShutdownBehavior: !If
        - TerminateInstance
        - terminate
        - stop
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs: 
            VolumeSize: 30
      UserData:
        Fn::Base64:
          !Join 
            - ''
            - - <script>
              - |+

              - 'cfn-init.exe -v --stack='
              - !Ref 'AWS::StackId'
              - ' --resource=PyramidInstance'
              - ' --configsets=Install'
              - ' --region='
              - !Ref 'AWS::Region'
              - |+

              - |
                # Signal the status from cfn-init

              - 'cfn-signal.exe -e %ERRORLEVEL% '
              - !Base64
                Ref: InstanceWaitHandle
              - |+

              - </script>
              - |+

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: Vendor
          Value: Pyramid
        - Key: StackName
          Value: !Sub '${BaseStackName}'
        - Key: Contents
          Value: !Sub '${InstancePurpose}'

# Outputs:
  # RDSAddress:
  #   Description: Database domain name
  #   Value: !Ref RDSAddress
  # PyramidRDSName:
  #   Description: Pyramid database name
  #   Value: !Ref RDSName
  # InitialUsername:
  #   Value: !Ref InitialUsername
  #   Description: Initial user name
  # InitialPassword:
  #   Value: !Ref InitialUserPassword
  #   Description: Initial user password
  # PublicDNSName:
  #   Value: !GetAtt PyramidInstance.PublicDnsName
  #   Description: Instance Public DNS name
  # PrivateDNSName:
  #   Value: !GetAtt PyramidInstance.PrivateDnsName
  #   Description: Instance Private DNS name

