AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Restores a Pyramid deployment - repository database and EFS file systems - from S3.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Deployment backup being upgraded from
        Parameters:
          - BackupS3BucketAndFolder
      - Label:
          default: Calling Stack and values
        Parameters:
          - BaseStackName
          - PyramidRole
          - PyramidInstanceProfile
          - SharedFileSystemId
          - PyramidProcessesSecurityGroup
          - MountTargetSecurityGroup
      - Label:
          default: Destination Repository Database Service
        Parameters:
          - RDSAddress
          - RDSPort
          - RDSUser
          - RDSPassword
          - RDSName
      - Label:
          default: Working Instance configuration
        Parameters:
          - LatestAmiId
          - Subnet
          - KeyPairName
          - RunOnce
          - ClearOldServers
    ParameterLabels:
      BackupS3BucketAndFolder:
        default: S3 path to a Pyramid backup
      BaseStackName:
        default: Base Stack Name being deployed into
      PyramidRole:
        default: Deployment Pyramid Role
      PyramidInstanceProfile:
        default: Deployment PyramidInstanceProfile
      SharedFileSystemId:
        default: Deployment SharedFileSystemId
      PyramidProcessesSecurityGroup:
        default: Deployment PyramidProcessesSecurityGroup
      MountTargetSecurityGroup:
        default: Deployment MountTargetSecurityGroup
      RDSAddress:
        default: Existing PostgreSQL RDS domain name
      RDSPort:
        default: RDS database port
      RDSUser:
        default: RDS database user name
      RDSPassword:
        default: RDS database password
      RDSName:
        default: Repository database name
      LatestAmiId:
        default: Latest Amazon Linux 2 AMI
      Subnet:
        default: Subnet within the deployment VPC to run the instance in
      KeyPairName:
        default: Key pair name
      RunOnce:
        default: Run and stop
      ClearOldServers:
        default: Remove old servers after restore
Parameters:
  BackupS3BucketAndFolder:
    Description: >-
      S3 path to a Pyramid backup
    Type: String
    MinLength: '5'
    MaxLength: '1000'
    AllowedPattern: '^(?=^.{5,1000}$)[-_a-zA-Z0-9/\=()]*$'
    ConstraintDescription: >-
      Min 5 characters. First character must be a letter. Must contain only letters, digits, '/', '-', '_', '=', '*' or parentheses.
  BaseStackName:
    Description: Base Stack Name
    Type: String
    MinLength: '5'
    AllowedPattern: '^(?=^.{5,255}$)[-_a-zA-Z0-9/\=()]*$'
  RDSAddress:
    Description: >-
      Domain/Address of an existing Postgres RDS service
    Type: String
    MinLength: '8'
    MaxLength: '128'
    AllowedPattern: '[a-zA-Z][-_a-zA-Z0-9\.]*'
    ConstraintDescription: >-
      Min 8 characters. First character must be a letter. Must contain only letters, digits, '.', '-' or underscores.
  RDSUser:
    Description: >-
      Master user name for the RDS database. Min 5 characters. It can contain
      only alphanumeric characters and underscores.
    Type: String
    MinLength: '5'
    MaxLength: '64'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: >-
      Min 5 characters. Can contain only alphanumeric characters, minus and
      underscores.
  RDSPassword:
    Description: >-
      Master password for the RDS database. Min 8 characters. Can contain only
      alphanumeric characters, minus and underscores.
    Type: String
    MinLength: '8'
    MaxLength: '64'
    NoEcho: 'true'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: >-
      Min 8 characters. Can contain only alphanumeric characters, minus and
      underscores.
  RDSPort:
    Description: RDS Port
    Type: Number
    Default: '5432'
    MinValue: '1024'
    ConstraintDescription: Port number must be higher than 1024
  RDSName:
    Description: Repository database name in the RDS service.
    Type: String
    Default: pyramid
    MinLength: '6'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][-_a-zA-Z0-9]*'
    ConstraintDescription: >-
      Min 6 characters. Must begin with a letter and contain only alphanumeric
      characters, minus and underscores.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs'
    Description: SSM Parameter for Latest Amazon Linux 2 AMI
  Subnet:
    Description: >-
      Subnet within the VPC of the Pyramid deployment to run the instance
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: Required
  KeyPairName:
    Description: >-
      Name of an existing EC2 key pair, which allows you to securely connect to
      your instance after it launches.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Required
  PyramidProcessesSecurityGroup:
    Description: >-
      Common Security Group for Pyramid processes
    Type: 'AWS::EC2::SecurityGroup::Id'
    ConstraintDescription: Required
  MountTargetSecurityGroup:
    Description: >-
      Security Group to connect to Pyramid deployment shared EFS
    Type: 'AWS::EC2::SecurityGroup::Id'
    ConstraintDescription: Required
  PyramidInstanceProfile:
    Description: >-
      To run the instance.
    Type: String
  PyramidRole:
    Description: >-
      To run the instance.
    Type: String
  SharedFileSystemId:
    Description: >-
      To run the instance.
    Type: String
  RunOnce:
    Description: >-
      Run the instance start scripts and stop.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  ClearOldServers:
    Description: >-
      Remove old server references after restore.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not 
          - 'Fn::EachMemberEquals':
              - 'Fn::RefAll': 'AWS::EC2::KeyPair::KeyName'
              - ''
        AssertDescription: All key pair parameters must not be empty
Conditions:
  TerminateInstance: !Equals
   - !Ref RunOnce
   - 'true'
Resources:
  InstanceWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstanceWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Handle: !Ref InstanceWaitHandle
      # 30 mins
      Timeout: '1800'
      Count: 1

  RestoreManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: S3GetObject
            Effect: Allow
            Action:
              - 's3:GetObject'
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':s3:::'
                  - !Ref BackupS3BucketAndFolder
                  - '/*'
          - Sid: S3ListBucket
            Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':s3:::'
                  - !Select [0, !Split ["/", !Ref BackupS3BucketAndFolder]]
      Roles:
        - !Ref PyramidRole

  RestoreInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: RestoreManagedPolicy
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - EnableAmazonLinuxExtraPackages
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - RestorePyramid
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent

        EnableAmazonLinuxExtraPackages:
          packages:
            yum:
              amazon-efs-utils: []
              amazon-cloudwatch-agent: []
          commands:
            enable_amazon-linux-extras_packages:
              command: "amazon-linux-extras enable epel postgresql10 && yum clean metadata"

        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.RestoreInstance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource RestoreInstance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service

        # Definition of json configuration of AmazonCloudWatchAgent
        02_config-amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/cfn-ini*.log",
                            "log_group_name": "pyramid/${BaseStackName}",
                            "log_stream_name": "{instance_id}-restore/cf-init",
                            "timestamp_format": "%Y-%m-%d %H:%M:%S,%f"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

        RestorePyramid:
          packages:
            yum:
              # installed with EFS
              # nfs-utils: []
              postgresql: []
              
          files:
            /usr/src/pyramid/mnt-efs.sh:
              content: |
                #!/bin/bash
                #
                # Set up an EFS mount on an instance.
                #
                # Create the mount target if one has not been created for
                # the AZ the subnet is attached to.
                # 
                # Create the  --mountPoint <mount point directory> and mount an Elastic File
                # System (EFS) id --efsId <EFS ID> to it.
                #
                # Parameters:
                # efsId=${efsId}
                # mountPoint=${mountPoint:-/mnt/pyramid}
                # subnet
                # securityGroup
                # region
                #
                # So minimal use is:
                # mnt-efs.sh \
                #   --efsId fs-24334234 \
                #   --subnet subnet-055fb67972f8052d2 \
                #   --securityGroup sg-0667a5ea299a0e03c \
                #   --region us-east-1
                ##
                # This script can only run on an AWS instance. It must run as root, and be
                # invoked at instance startup: cf-init, user data
                #
                
                set -o errexit

                # ----------------------------------------------------------------------------
                # Set and validate parameters
                # ----------------------------------------------------------------------------

                efsId=${efsId}
                mountPoint=${mountPoint:-/mnt/pyramid}
                subnet=
                securityGroup=
                region=

                wait_for_mount_target_availability() {
                  local mountTarget=${1}
                  local region=${2}

                  echo "Waiting for mount target $mountTarget to be available"
                  local maxTimes=30
                  local sleepTime=10
                  local count=0
                  local notificationCount=5
                  while true
                  do
                    describeMT=`aws efs describe-mount-targets --mount-target-id $mountTarget --region $region --output text`
                    mt_status=$( echo "$describeMT" | cut -f 6 )
                    if [ "${mt_status}" = "available" ] ; then
                      break
                    fi
                    count=$(( count + 1  ))
                    if [ "$count" -ge "$maxTimes" ] ; then
                      echo "Mount target status is $mt_status. Did not become available after ${maxTimes} tries, waiting ${sleepTime} seconds between tries... Exiting"
                      return 1
                    elif  ! (( count % notificationCount )) ; then
                      echo "Mount target status is $mt_status ...continuing to wait"
                    fi
                    sleep $sleepTime
                  done
                  echo "Mount target $mountTarget is available"
                  return 0
                }

                create_mount_target() {
                  local efsId=${1}
                  local subnet=${2}
                  local securityGroup=${3}
                  local region=${4}

                  # Subnet AZ
                  subnetAZ=`aws ec2 describe-subnets --subnet-ids $subnet --region $region --output text | grep '^SUBNETS' | cut -f 3` || return 1
                  local foundAZ=1

                  allMountTargets=`aws efs describe-mount-targets --file-system-id $efsId --region $region --output text`
                  if [ $? -ne 0 ] ; then
                    return 1
                  fi
                  while read line ; do
                    az=$( echo "$line" | cut -f 3 )
                    mt_status=$( echo "$line" | cut -f 6 )
                    mountTarget=$( echo "$line" | cut -f 7 )
                    if [ "${az}" = "${subnetAZ}" ] ; then
                      if [ "${mt_status}" != 'available' ] ; then
                        wait_for_mount_target_availability $mountTarget $region
                        if [ $? -ne 0 ] ; then
                          return 1
                        fi
                      fi
                      foundAZ=0
                      break
                    fi
                  done <<< "$allMountTargets"

                  if [ $foundAZ = 0 ]; then
                    echo "Mount target for $efsId in $subnetAZ already existed"
                    return 0
                  fi
                  echo "About to create mount target for file system: $efsId in AZ: $subnetAZ"
                  newMountTargetResult=`aws efs create-mount-target \
                      --file-system-id $efsId \
                      --subnet-id $subnet \
                      --security-groups $securityGroup \
                      --region $region \
                      --output text`
                  if [ $? -ne 0 ] ; then
                    echo "create-mount-target failed"
                    return 1
                  fi
                  mt_id=$( echo "$newMountTargetResult" | cut -f 6 )

                  wait_for_mount_target_availability $mt_id $region
                  return $?
                }


                ##########################################
                # main script

                while [ $# -gt 0 ]; do
                  if [[ $1 == *"--"* ]]; then
                    param="${1/--/}"
                    declare $param="$2"
                    echo $1 $2 # Optional: to see the parameter:value result
                    shift
                  fi
                  shift
                done

                if [[ -z "${efsId}" ]] ; then
                  echo "efsId not set"
                  exit 1
                fi

                if [[ -z "${subnet}" ]] ; then
                  echo "subnet not set"
                  exit 1
                fi

                if [[ -z "${securityGroup}" ]] ; then
                  echo "securityGroup not set"
                  exit 1
                fi

                if [[ -z "${region}" ]] ; then
                  echo "region not set"
                  exit 1
                fi
                
                # ----------------------------------------------------------------------------
                # Create mount point directory
                # ----------------------------------------------------------------------------
                # if the mountPoint directory does not exist
                if [ ! -d "${mountPoint}" ] ; then
                  mkdir -p "${mountPoint}"
                else
                  # fail if the mountPoint already exists
                  echo "mountPoint directory ${mountPoint} already exists. exiting..."
                  exit 1
                fi

                # create a mount target group if needed
                create_mount_target $efsId $subnet $securityGroup $region
                if [ $? -ne 0 ] ; then
                echo "create_mount_target failed"
                exit 1
                fi

                echo "About to mount $efsId to $mountPoint"

                # Mount the EFS volume using the AWS EFS helper
                # IAM is used for authentication to EFS
                sleepTime=20
                maxTimes=40
                notificationCount=5
                count=0
                while true
                do
                  mount -t efs -o tls,iam $efsId $mountPoint && break
                  count=$(( count + 1  ))
                  if [ "$count" -ge "$maxTimes" ] ; then
                    echo "Mount did not succeed after ${maxTimes} tries, waiting ${sleepTime} seconds between tries... Exiting"
                    exit 1
                  elif  ! (( count % notificationCount )) ; then
                      echo "Mount did not succeed ...continuing to wait"
                  fi
                  sleep $sleepTime
                done

                echo "Mounted EFS $efsId to $mountPoint"

              mode: '000755'
              owner: root
              group: root


            /usr/src/pyramid/restore-from-s3:
              content: |
                #!/bin/bash
                baseStackName=${1}
                bucketAndFolder=${2}
                subnet=${3}
                mtSecurityGroup=${4}
                sharedFileSystemEFS=${5}
                rdsAddress=${6}
                rdsPort=${7}
                rdsUsername=${8}
                rdsPassword=${9}
                rdsName=${10}
                region=${11}
                clearOldServers=${12:-true}

                set -o errexit

                /usr/src/pyramid/mnt-efs.sh \
                    --subnet $subnet \
                    --securityGroup $mtSecurityGroup \
                    --efsId $sharedFileSystemEFS \
                    --region $region

                echo "Synching backup in s3://$bucketAndFolder to EFS $sharedFileSystemEFS"
                # dump s3 into the shared file system
                aws s3 sync --no-progress s3://$bucketAndFolder/ /mnt/pyramid

                if [ ! -d /mnt/pyramid/repoBackup ] ; then
                  echo "No /mnt/pyramid/repoBackup directory. Exiting..."
                  exit 1
                fi

                # get the latest dump file
                dumpFile=`ls -t1 /mnt/pyramid/repoBackup/*.dump |  tail -n 1`

                if [[ -z "${dumpFile}" ]] ; then
                  echo "No *.dump files in /mnt/pyramid/repoBackup directory. Exiting..."
                  exit 1
                fi

                echo "restoring $dumpFile to database $rdsName on service $rdsAddress"

                # create a new database and restore the repository dump into it
                export PGPASSWORD=$rdsPassword
                createdb -U $rdsUsername -h $rdsAddress -p $rdsPort $rdsName

                # exclude extensions
                pg_restore -l -F c -U $rdsUsername -h $rdsAddress -p $rdsPort $dumpFile | grep -v "EXTENSION" > /tmp/ignore_pg_extensions

                # Compressed. No Owner. No privileges
                pg_restore -F c -O -x -L /tmp/ignore_pg_extensions -U $rdsUsername -h $rdsAddress -p $rdsPort -d $rdsName $dumpFile

                if [ "${clearOldServers}" == "true" ] ; then
                  echo "Deleting server_instances"
                  psql -U $rdsUsername -h $rdsAddress -p $rdsPort -d $rdsName <<EOF
                delete from server_instances;
                EOF
                fi

                umount /mnt/pyramid
                # rm -rf /mnt/pyramid

              mode: '000755'
              owner: root
              group: root
          commands:
            1-execute-restore:
              # restore-from-s3 \
              #   Pyr-v8 \
              #   pyr-v8-backup-s3bucket-17f7k5buabvbh/2020-11-11-08-50-14
              #   subnet-01892aa0ff74872e0 \
              #   sg-0ecfc9a157ede67dd \
              #   fs-ec548f19 \
              #   pyr-v8.cluster-cfave2vnma46.us-east-1.rds.amazonaws.com
              #   5432
              #   aName
              #   aPassword
              #   aDatabaseName
              #   us-east-1 \
              #   true
              command: !Join
                - ' '
                - - /usr/src/pyramid/restore-from-s3
                  - !Ref BaseStackName
                  - !Ref BackupS3BucketAndFolder
                  - !Ref Subnet
                  - !Ref MountTargetSecurityGroup
                  - !Ref SharedFileSystemId
                  - !Ref RDSAddress
                  - !Ref RDSPort
                  - !Ref RDSUser
                  - !Ref RDSPassword
                  - !Ref RDSName
                  - !Sub '${AWS::Region}'
                  - !Ref ClearOldServers
              ignoreErrors: 'false'

    Properties:
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref PyramidInstanceProfile
      InstanceType: t3.medium
      SecurityGroupIds:
        - !Ref PyramidProcessesSecurityGroup
        - !Ref MountTargetSecurityGroup
      SubnetId: !Ref Subnet
      InstanceInitiatedShutdownBehavior: !If
        - TerminateInstance
        - terminate
        - stop
      Monitoring: false
      DisableApiTermination: false
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs: 
            VolumeSize: 8
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              Content-Type: multipart/mixed; boundary="//"
              MIME-Version: 1.0
              --//
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"
              #cloud-config
              cloud_final_modules:
              [scripts-user, always]
              --//
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="userdata.txt"
              #!/bin/bash -xe

              # run cfn-init
            - |+

            - '/opt/aws/bin/cfn-init -v  --configsets default --stack '
            - !Ref 'AWS::StackName'
            - ' --resource RestoreInstance --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init

            - '/opt/aws/bin/cfn-signal -e $? '
            - !Base64
              Ref: InstanceWaitHandle
            - |+

            - |
              # If asked, halt and catch fire

            - 'if [ '''
            - !Ref RunOnce
            - ''' = ''true'' ] ; then /sbin/halt -p; fi'
            - |+

            - ''
            - |+

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: Vendor
          Value: Pyramid
        - Key: StackName
          Value: !Sub '${BaseStackName}'
        - Key: Contents
          Value: Backup

