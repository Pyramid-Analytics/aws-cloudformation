AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This workload template deploys an Application Load Balancer, 2 (Everything - IMDB)
  instances and an IMDB instance. Because we are launching from AWS Marketplace AMIs,
  which are limited to Standard Edition, we need to launch from a Central instance that
  has had an Enterprise license deployed to it.

  Central instance first, then run this template to add on.
  Kill Central instance. What if there are add on instances?
  Copy Resoources, SSM and Secrets?

  Nah! need a way to add the license in as part of the initialization of the cluster!

  2 Everything - IMDB: auto-scaled, ALB
  1 IMDB

  Am able to restore a backup on creation.

  **WARNING** This template creates EC2 instances and related
  resources. You will be billed for the AWS resources used if you create a stack
  from this template. (qs-1puat849f)
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Common instance and auto scaling configuration
        Parameters:
          - VPCID
          - KeyPairName
          - OperatorEmail
          - AllowSSHSecurityGroup
      - Label:
          default: Load Balancer configuration
        Parameters:
          - LoadBalancerSubnets
          - LoadBalancerInternetFacing
          - LoadBalancerPublic
          - HTTPAccessCIDR
      - Label:
          default: Pyramid auto scaling group configuration
        Parameters:
          - DeploymentSubnets
          - BackendProcessesInstanceType
          - IMDBInstanceType
      - Label:
          default: Repository Database configuration
        Parameters:
          - RDSType
          - RDSAddress
          - RDSPort
          - RDSName
          - RDSUser
          - RDSPassword
          - InitialUsername
          - InitialUserPassword
          - DoInitializeRepository
          - BackupS3BucketAndFolder
    ParameterLabels:
      VPCID:
        default: VPC ID
      KeyPairName:
        default: Key pair name
      OperatorEmail:
        default: Operator email address
      AllowSSHSecurityGroup:
        default: SSH Security Group ID
      LoadBalancerSubnets:
        default: Load balancer subnets
      LoadBalancerPublic:
        default: Load Balancer Available on Public Internet?
      LoadBalancerInternetFacing:
        default: Is the load balancer exposed to the public internet?
      HTTPAccessCIDR:
        default: HTTP/HTTPS CIDR
      BackendProcessesInstanceType:
        default: Instance type for main engine instances
      DeploymentSubnets:
        default: Engine deployment subnets
      IMDBInstanceType:
        default: Instance type for IMDB instances
      DoInitializeRepository:
        default: Initialize the Pyramid Repository database
      RDSType:
        default: Database type
      RDSAddress:
        default: RDS repository database address
      RDSPort:
        default: Repository RDS database port
      RDSUser:
        default: Repository RDS database user name
      RDSPassword:
        default: Repository RDS database password
      RDSName:
        default: Repository database name on server
      InitialUsername:
        default: Initial Pyramid user name
      InitialUserPassword:
        default: Initial Pyramid User password
      BackupS3BucketAndFolder:
        default: S3 path to a Pyramid backup
Parameters:
  VPCID:
    Description: ID of your existing VPC for deployment.
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: Required
  KeyPairName:
    Description: >-
      Name of an existing EC2 key pair, which allows you to securely connect to
      your instance after it launches.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Required
  OperatorEmail:
    Description: >-
      (Optional) Email address that notifications of any scaling operations will
      be sent to.
    Type: String
    AllowedPattern: >-
      (([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?))||(^$)
    ConstraintDescription: Must be a valid email address.
  AllowSSHSecurityGroup:
    Description: >-
      Optional. ID of the security group (e.g. sg-0fec99734449e8888) to allow SSH access into the instance ie. Bastion
      access.
    Type: String
    Default: ''
    MaxLength: '128'
    AllowedPattern: '^$|sg-[a-f0-9]{6,17}$'
  LoadBalancerSubnets:
    Description: >-
      Subnets for load balancer
    Type: 'List<AWS::EC2::Subnet::Id>'
  LoadBalancerInternetFacing:
    Description: >-
      Load Balancer is exposed to public Internet
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  HTTPAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: >-
      Allowed CIDR block for HTTP and HTTPS traffic. Please set CIDR to
      x.x.x.x/32 to allow one specific IP address access, 0.0.0.0/0 to allow all
      IP addresses access, or another CIDR range.
    Type: String
    MinLength: '9'
  DeploymentSubnets:
    Description: >-
      Subnets for other engine instances
    Type: 'List<AWS::EC2::Subnet::Id>'
  BackendProcessesInstanceType:
    Description: >-
      Amazon EC2 instance type for the Pyramid instances.
      Has to be available for the deployment region.
    Type: String
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - c5.12xlarge
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.12xlarge
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.8xlarge
      - c5n.12xlarge
    Default: m5.2xlarge
    MinLength: '1'
    ConstraintDescription: Must contain valid instance type.
  IMDBInstanceType:
    Description: >-
      Amazon EC2 instance type for the Pyramid In-Memory database.
      Has to be available for the deployment region.
    Type: String
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - c5.12xlarge
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.12xlarge
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.8xlarge
      - c5n.12xlarge
    Default: m5.2xlarge
    MinLength: '1'
    ConstraintDescription: Must contain valid instance type.
  DoInitializeRepository:
      Description: True to create the repository database. False assumes the repository database already exists
      Type: String
      AllowedValues:
        - true
        - false
      Default: 'true'
  RDSType:
    Description: Database type
    Type: String
    Default: PostgreSQL
    AllowedValues:
      - PostgreSQL
      - MicrosoftSQLServer
  RDSUser:
    Description: Master user name for the RDS database.
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: It can contain only alphanumeric characters and underscores.
  RDSPassword:
    Description: Master password for the RDS database.
    Type: String
    MinLength: '1'
    MaxLength: '64'
    NoEcho: 'true'
    AllowedPattern: >-
      ^(?=^.{8,255}$)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)((?=.*[^A-Za-z0-9])(?!.*[@/"'])).*$
    ConstraintDescription: >-
      Min 8 chars. Must include 1 uppercase, 1 lowercase, 1 number, 1 (non / @ " ') symbol
  RDSAddress:
    Description: Domain/Address of a Postgres RDS database
    Type: String
    MaxLength: '128'
    AllowedPattern: '[-_a-zA-Z0-9\.]*'
    ConstraintDescription: >-
      Domain/Address should be letters, digits, '.', '-' or underscores. Maximum
      128 characters long.
  RDSPort:
    Description: RDS Port
    Type: Number
    Default: '5432'
    MinValue: '1024'
    ConstraintDescription: Port number must be higher than 1024
  RDSName:
    Description: Repository database name on cluster.
    Type: String
    Default: pyramid
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: 'Can contain only alphanumeric characters, minus and underscores.'
  InitialUserPassword:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "Min 8 characters. Must begin with a letter and contain only alphanumeric characters."
    Description: "The Pyramid initial user password."
    MaxLength: "64"
    MinLength: "8"
    NoEcho: "True"
    Type: String
  InitialUsername: 
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "Must begin with a letter and contain only alphanumeric characters."
    Default: admin
    Description: "The Pyramid initial username."
    MaxLength: "16"
    MinLength: "1"
    Type: String
  BackupS3BucketAndFolder:
    Description: >-
      S3 path to a Pyramid backup
    Type: String
    Default: ''
    MaxLength: '1000'
    AllowedPattern: '^$|^(?=^.{5,255}$)[-_a-zA-Z0-9/\=()]*$'
    ConstraintDescription: >-
      Optional. Otherwise min 5 characters. First character must be a letter. Must contain only letters, digits, '/', '-', '_', '=', '*' or parentheses.
Mappings:
  AWSAMIRegionMap:
    us-east-1:
      # 2020.14.035 - autoscaling
      '64': ami-01a0fa635f41f579d
    us-east-2:
      '64': XXX
    us-west-1:
      '64': XXX
    us-west-2:
      '64': XXX
    ca-central-1:
      '64': XXX
    eu-central-1:
      '64': XXX
    eu-west-1:
      '64': XXX
    eu-west-2:
      '64': XXX
    eu-west-3:
      '64': XXX
    eu-north-1:
      '64': XXX
    ap-southeast-1:
      '64': XXX
    ap-southeast-2:
      '64': XXX
    ap-south-1:
      '64': XXX
    ap-northeast-1:
      '64': XXX
    ap-northeast-2:
      '64': XXX
    sa-east-1:
      '64': XXX
    us-gov-east-1:
      '64': XXX
    us-gov-west-1:
      '64': XXX
Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not 
          - 'Fn::EachMemberEquals':
              - 'Fn::RefAll': 'AWS::EC2::KeyPair::KeyName'
              - ''
        AssertDescription: All key pair parameters must not be empty
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the same VPC
Conditions:
  AllowSSH: !Not 
    - !Equals 
      - !Ref AllowSSHSecurityGroup
      - ''
  RestoreFromBackup: !Not 
    - !Equals 
      - !Ref BackupS3BucketAndFolder
      - ''
  InitializeRepositoryCondition: !And
    - !Not [!Condition RestoreFromBackup]
    - !Equals [!Ref DoInitializeRepository, true]
  LoadBalancerIsInternet: !Equals
    - !Ref LoadBalancerInternetFacing
    - 'true'

Resources:
  PyramidRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: PyramidPolicy
          PolicyDocument:
            Statement:
              - Sid: AccessCFvalues
                Effect: Allow
                Action:
                  - 'cloudformation:Describe*'
                  - 'cloudformation:List*'
                  - 'cloudformation:Get*'
                  - 'cloudformation:Signal*'
                Resource:
                  - !Sub >-
                    arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
                  - !Sub >-
                    arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/*
              - Sid: InstanceLogs
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/pyramid/${AWS::StackName}
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/pyramid/${AWS::StackName}:log-stream:*
              - Sid: SecretsManagerGet
                Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Sub >-
                    arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/Pyramid/${AWS::StackName}/*
              - Sid: SSMGet
                Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                  - 'ssm:PutParameter'
                  - 'ssm:GetParametersByPath'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Pyramid/${AWS::StackName}/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Pyramid/${AWS::StackName}'
              - Sid: DescribeSubnets
                Effect: Allow
                Action:
                  - 'ec2:DescribeSubnets'
                Resource: '*'

  PyramidInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref PyramidRole


  CidrOfVpcRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  CidrOfVpcLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3

          from botocore.exceptions import ClientError

          from urllib.parse import urlencode

          from urllib.request import urlopen, Request, HTTPError, URLError

          import json

          def send_response(event, context, response_status, reason=None,
          response_data={}):
              body = {
                  "Status": response_status,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"],
                  "LogicalResourceId": event["LogicalResourceId"],
              }

              print("Responding: {}".format(response_status))

              if reason:
                  print(reason)
                  body["Reason"] = reason

              if response_data:
                  print(response_data)
                  body["Data"] = response_data

              body = json.dumps(body).encode("utf-8")

              req = Request(event["ResponseURL"], data=body, headers={
                  "Content-Length": len(body),
                  "Content-Type": "",
              })
              req.get_method = lambda: "PUT"

              try:
                  urlopen(req)
                  return True
              except HTTPError as e:
                  print("Failed executing HTTP request: {}".format(e.code))
                  return False
              except URLError as e:
                  print("Failed to reach the server: {}".format(e.reason))
                  return False

          def get_VPC_CIDR(VpcId, Region):
              try:
                  ec2 = boto3.resource("ec2", region_name=Region)
              except ClientError as e:
                  return {
                  "StatusCode" : 400,
                  "Message" : e.response['Error']['Message']
              }
              try:
                  vpc = ec2.Vpc(VpcId)
              except ClientError as e:
                  return {
                  "StatusCode" : 400,
                  "Message" : e.response['Error']['Message']
              }

              print(f"REQUEST for VPC {VpcId}")
              try:
                  cidr = vpc.cidr_block
              except ClientError as e:
                  return {
                  "StatusCode" : 400,
                  "Message" : e.response['Error']['Message']
              }
                  
              if cidr is None:
                  return {
                      "StatusCode" : 400,
                      "Message" : "No CIDR returned"
                  }

              return {
                  "StatusCode" : 200,
                  "VpcId" : VpcId,
                  "Region" : Region,
                  "CidrBlock" : cidr,
                  "Message" : "OK"
              }

          def handler(event, context):
              print("RECEIVED")
              print(event)
              print(event.get("RequestType"))
              #print
              if event.get("RequestType") == "Delete":
                  return send_response(event, context, "SUCCESS")
              
              requestProperties = event.get("ResourceProperties")
              vpc_id = requestProperties.get("VpcId")
              region = requestProperties.get("Region")
                  
              print(f"VpcId: {vpc_id}, Region: {region}")
              answer = get_VPC_CIDR(vpc_id, region)
              print(answer)

              if answer["StatusCode"] == 400:
                  print(f"FAILED: {answer['Message']}")
                  return send_response(event, context, "FAILED", reason=answer["Message"])

              print(f"SUCCESS: {answer['CidrBlock']}")
              return send_response(event, context, "SUCCESS", response_data={
                      "CidrBlock": answer["CidrBlock"]
                  }
              )
              
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt CidrOfVpcRole.Arn
  
  CidrOfVpc:
    Type: 'Custom::CidrOfVpcLambda'
    Properties:
      ServiceToken: !GetAtt CidrOfVpcLambda.Arn
      VpcId: !Ref VPCID
      Region: !Ref 'AWS::Region'

  WebAccessSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP and HTTPS access to the instance
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HTTPAccessCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref HTTPAccessCIDR

  PyramidProcessesSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access across the Pyramid process instances
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  
  SSHIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: AllowSSH
    Properties:
      GroupId: !GetAtt PyramidProcessesSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AllowSSHSecurityGroup

  PyramidProcessesSecurityGroupInternalIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt PyramidProcessesSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 12100
      ToPort: 12200
      SourceSecurityGroupId: !GetAtt PyramidProcessesSecurityGroup.GroupId

  PyramidProcessesSecurityGroupInternalIngressForWebServer:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt PyramidProcessesSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 8282
      ToPort: 8282
      SourceSecurityGroupId: !GetAtt PyramidProcessesSecurityGroup.GroupId

  MountTargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: FileSystem Security Group
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: !GetAtt CidrOfVpc.CidrBlock
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt PyramidProcessesSecurityGroup.GroupId

  SharedFileSystem:
    Type: 'AWS::EFS::FileSystem'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Pyramid-SharedFileSystem'
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow administration
            Effect: "Allow"
            Action:
              - "elasticfilesystem:Client*"
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${PyramidRole}'
      KmsKeyId: !GetAtt SharedFileSystemKey.Arn

  SharedFileSystemKey:
    Type: 'AWS::KMS::Key'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id:  !Sub '${AWS::StackName}-pyramid-shared-fs-key'
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:*'
            Resource: '*'

  PyramidSharedFileSystemManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn: SharedFileSystem
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ManageSharedFileSystemMountTargets
            Effect: Allow
            Action:
              - 'elasticfilesystem:DescribeMountTargets'
              - 'elasticfilesystem:CreateMountTarget'
            Resource:
              - !Sub >-
                arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${SharedFileSystem}
      Roles:
        - !Ref PyramidRole

  DeleteMountTargetsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - !Ref PyramidSharedFileSystemManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: DeleteSharedFileSystemMountTargets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: DeleteSharedFileSystemMountTargets
                Effect: Allow
                Action:
                  - 'elasticfilesystem:DeleteMountTarget'
                Resource:
                  - !Sub >-
                    arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${SharedFileSystem}

  DeleteMountTargetsLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3

          from botocore.exceptions import ClientError
          from urllib.parse import urlencode
          from urllib.request import urlopen, Request, HTTPError, URLError
          import json

          def send_response(event, context, response_status, reason=None, response_data={}):
              body = {
                  "Status": response_status,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"],
                  "LogicalResourceId": event["LogicalResourceId"],
              }
              
              print("Responding: {}".format(response_status))
              
              if reason:
                  print(reason)
                  body["Reason"] = reason
              
              if response_data:
                  print(response_data)
                  body["Data"] = response_data
              
              body = json.dumps(body).encode("utf-8")
              
              req = Request(event["ResponseURL"], data=body, headers={
                  "Content-Length": len(body),
                  "Content-Type": "",
              })
              req.get_method = lambda: "PUT"
              
              try:
                  urlopen(req)
                  return True
              except HTTPError as e:
                  print("Failed executing HTTP request: {}".format(e.code))
                  return False
              except URLError as e:
                  print("Failed to reach the server: {}".format(e.reason))
                  return False

          def delete_mount_targets(event, _):
              
              # find the MountTargets of the EFS id
              
              efsId = event['ResourceProperties']['EFSId']
              region = event['ResourceProperties']['Region']
              
              client = boto3.client('efs')
              
              try:
                  mount_targets = client.describe_mount_targets(FileSystemId=efsId)
              except ClientError as e:
                  print(e)
                  return {
                        "Status" : False,
                        "Message" :  e.response['Error']['Message']
                  }
                  
              if len(mount_targets["MountTargets"]) == 0:
                  return {
                      "Status" : True,
                      "Message" : "no mount targets to process"
                  }

              for mount_target in mount_targets["MountTargets"]:
                # delete them
                  print(f"Deleting MountTarget: {mount_target['MountTargetId']} for AZ: {mount_target['AvailabilityZoneId']}")
                  try:
                      delete_mount_target = client.delete_mount_target(MountTargetId=mount_target["MountTargetId"])
                  except ClientError as e:
                      print(e)
                      return {
                          "Status" : False,
                          "Message" : e.response['Error']['Message']
                      }

              return {
                  "Status" : True,
                  "Message" : "OK"
              }

          def handler(event, context):
              print(event)
              answer={}
              if event.get("RequestType") == "Delete":
                  answer = delete_mount_targets(event, context)
              return send_response(event, context, "SUCCESS", response_data=answer)

      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt DeleteMountTargetsRole.Arn

  DeleteMountTargets:
    Type: 'Custom::DeleteMountTargetsLambda'
    Properties:
      ServiceToken: !GetAtt DeleteMountTargetsLambda.Arn
      EFSId: !Ref SharedFileSystem
      Region: !Ref 'AWS::Region'

  RestoreManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Condition: RestoreFromBackup
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: S3GetObject
            Effect: Allow
            Action:
              - 's3:GetObject'
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':s3:::'
                  - !Ref BackupS3BucketAndFolder
                  - '/*'
          - Sid: S3ListBucket
            Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':s3:::'
                  - !Select [0, !Split ["/", !Ref BackupS3BucketAndFolder]]
      Roles:
        - !Ref PyramidRole

  RDSPasswordSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/RepositoryDatabasePassword'
      Description: Password for RDS service
      SecretString: !Ref RDSPassword
      Tags:
        -
          Key: StackName
          Value: !Ref AWS::StackName
        -
          Key: Vendor
          Value: Pyramid

  InitialUserPasswordSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/InitialUserPassword'
      Description: Password for RDS service
      SecretString: !Ref InitialUserPassword
      Tags:
        -
          Key: StackName
          Value: !Ref AWS::StackName
        -
          Key: Vendor
          Value: Pyramid

  KeyPairNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/KeyPairName'
      Type: String
      Value: !Ref KeyPairName
      Description: Key pair name
      Tags:
        StackName: !Ref AWS::StackName
        Vendor: Pyramid

  PyramidProcessesSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/PyramidProcessesSecurityGroup'
      Type: String
      Value: !Ref PyramidProcessesSecurityGroup
      Description: Common security group for all Pyramid instances
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  WebAccessSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/WebAccessSecurityGroup'
      Type: String
      Value: !Ref WebAccessSecurityGroup
      Description: Security group for web access to instances
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  PyramidRoleSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/PyramidRole'
      Type: String
      Value: !Ref PyramidRole
      Description: Common role for all Pyramid instances
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  PyramidInstanceProfileSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/PyramidInstanceProfile'
      Type: String
      Value: !Ref PyramidInstanceProfile
      Description: Common instance profile for all Pyramid instances
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  MountTargetSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/MountTargetSecurityGroup'
      Type: String
      Value: !Ref MountTargetSecurityGroup
      Description: Security group to allow Pyramid instances mount EFS volumes
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  SharedFileSystemSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/SharedFileSystem'
      Type: String
      Value: !Ref SharedFileSystem
      Description: EFS volume shared across Pyramid instances
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  RepositoryDatabaseTypeSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/RepositoryDatabaseType'
      Type: String
      Value: !Ref RDSType
      Description: Database type for repository in RDS
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  RepositoryDatabaseAddressSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/RepositoryDatabaseAddress'
      Type: String
      Value: !Ref RDSAddress
      Description: RDS domain of repository
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  RepositoryDatabasePortSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/RepositoryDatabasePort'
      Type: String
      Value: !Ref RDSPort
      Description: Port for repository in RDS
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  RepositoryDatabaseUsernameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/RepositoryDatabaseUsername'
      Type: String
      Value: !Ref RDSUser
      Description: User name for repository in RDS
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  RepositoryDatabasePasswordARNSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/RepositoryDatabasePasswordARN'
      Type: String
      Value: !Ref RDSPasswordSecret
      Description: ARN of repository database password Secret
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  RepositoryDatabaseNameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/RepositoryDatabaseName'
      Type: String
      Value: !Ref RDSName
      Description: Repository schema name in RDS
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  InitialUsernameSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/InitialUsername'
      Type: String
      Value: !Ref InitialUsername
      Description: Initial admin User name for the yramid deployment
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  InitialUserPasswordARNSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/Pyramid/${AWS::StackName}/InitialUserPasswordARN'
      Type: String
      Value: !Ref InitialUserPasswordSecret
      Description: ARN of repository database password Secret
      Tags:
        StackName: !Sub '${AWS::StackName}'
        Vendor: Pyramid

  PyramidLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/pyramid/${AWS::StackName}'
      RetentionInDays: 30

  # CreateRepositoryDatabaseService:
  #   Type: 'AWS::CloudFormation::Stack'
  #   Condition: CreateDatabaseService
  #   Properties:
  #     TemplateURL: !Sub 
  #       - >-
  #         https://${QSS3BucketName}.s3${QSS3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/pyramid-aurora-postgres.yaml
  #       - QSS3Region: !If 
  #           - GovCloudRegion
  #           - '-us-gov-west-1'
  #           - ''
  #     Parameters:
  #       VPCID: !Ref VPCID
  #       SubnetIds: !Join [',', !Ref BackendProcessesSubnets]
  #       CustomDBSecurityGroup: !Ref CustomDBSecurityGroup
  #       WorkloadSecurityGroup: !Ref WorkloadSecurityGroup
  #       ClusterName: !Ref ClusterName
  #       DBEngineMode: !Ref DBEngineMode
  #       DBPort: !Ref RDSPort
  #       DBMasterUsername: !Ref RDSUser
  #       DBMasterUserPassword: !Ref RDSPassword

  # InitializeRepository:
  #   Type: 'AWS::CloudFormation::Stack'
  #   Condition: DoInitializeRepositoryCondition
  #   Properties:
  #     TemplateURL: !Sub 
  #       - >-
  #         https://${QSS3BucketName}.s3${QSS3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/pyramid-single-instance.yaml
  #       - QSS3Region: !If 
  #           - GovCloudRegion
  #           - '-us-gov-west-1'
  #           - ''
  #     Parameters:
  #       AMIID: !FindInMap 
  #         - AWSAMIRegionMap
  #         - !Ref 'AWS::Region'
  #         - '64'
  #       PyramidProcess: Nothing
  #       InstancePurpose: InitializeRepository
  #       WorkloadInstanceType: !Ref RouterInstanceType
  #       WorkloadSecurityGroup: !Ref WorkloadSecurityGroup
  #       KeyPairName: !Ref KeyPairName
  #       Subnet: !If
  #         - UseBackendProcessesSubnets
  #         - !Select [0, !Ref BackendProcessesSubnets]
  #         - !Select [0, !Ref BackendProcessesSubnetIds]
  #       VPCID: !Ref VPCID
  #       PyramidInstanceProfile: !Ref PyramidInstanceProfile
  #       RunOnce: true
  #       RepositoryType: newremote
  #       RDSAddress: !Ref RDSAddress
  #       RDSPort: !Ref RDSPort
  #       DBName: !Ref RepositoryDBName
  #       RDSUser: !Ref RDSUser
  #       RDSPassword: !Ref RDSPassword
  #       InitialUsername: !Ref InitialUsername
  #       InitialUserPassword: !Ref InitialUserPassword

  InitializeRepository:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn:
      - SharedFileSystemSSM
      - InitialUsernameSSM
      - InitialUserPasswordARNSSM
      - RepositoryDatabaseTypeSSM
      - RepositoryDatabaseAddressSSM
      - RepositoryDatabasePortSSM
      - RepositoryDatabaseNameSSM
      - RepositoryDatabaseUsernameSSM
      - RepositoryDatabasePasswordARNSSM
      - MountTargetSecurityGroupSSM
      - PyramidInstanceProfileSSM
      - PyramidRoleSSM
      - PyramidProcessesSecurityGroupSSM
      - KeyPairNameSSM

    Properties:
      TemplateURL: >-
        https://pyramid-cloudformation.s3.amazonaws.com/marketplace/2020-14-autoscaling/pyramid-single-instance.yaml
      Parameters:
        AMIID: !FindInMap 
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - '64'
        BaseStackName: !Ref 'AWS::StackName'
        PyramidProcess: Nothing
        InstancePurpose: InitRepository
        InstanceType: !Ref IMDBInstanceType
        WorkloadSecurityGroups: !Join 
          - ','
          - - !Ref PyramidProcessesSecurityGroup
            - !Ref MountTargetSecurityGroup
        Subnet: !Select [0, !Ref DeploymentSubnets ]
        RunOnce: true
        BackupS3BucketAndFolder: !Ref BackupS3BucketAndFolder
        RepositoryType: !If
          - InitializeRepositoryCondition
          - newremote
          - currentremote

  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !Ref LoadBalancerSubnets
      SecurityGroups:
        - !Ref WebAccessSecurityGroup
      Type: application
      Scheme: !If
        - LoadBalancerIsInternet
        - 'internet-facing' 
        - 'internal'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '600'

  ELBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ElasticLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: /
      HealthCheckPort: 8181
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8181
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 10
      VpcId: !Ref VPCID

  ELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: '80'
      Protocol: HTTP

  ELBSecurityGroupInternalIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 
        - PyramidProcessesSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: '8181'
      ToPort: '8181'
      SourceSecurityGroupId: !Ref WebAccessSecurityGroup
      # SourceSecurityGroupId: !GetAtt 
      #   - WebServerELB
      #   - Outputs.ELBSecurityGroupId

  EngineAutoScalingGroup:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn: InitializeRepository
    Properties:
      TemplateURL: >-
        https://pyramid-cloudformation.s3.amazonaws.com/marketplace/2020-14-autoscaling/pyramid-autoscale-component.yaml
      Parameters:
        BaseStackName: !Ref 'AWS::StackName'
        PyramidProcess: EverythingExceptInMemoryDB
        AMIID: !FindInMap 
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - '64'
        SubnetIds:
          - !Join 
            - ','
            - !Ref DeploymentSubnets
        WorkloadSecurityGroups:
          - !Join 
            - ','
            - - !Ref PyramidProcessesSecurityGroup
              - !Ref MountTargetSecurityGroup
        WorkloadInstanceType: !Ref BackendProcessesInstanceType
        WorkloadNodesMaxSize: 2
        WorkloadNodesMinSize: 2
        OperatorEmail: !Ref OperatorEmail

  IMDBFailoverGroup:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn: InitializeRepository
    Properties:
      TemplateURL: >-
        https://pyramid-cloudformation.s3.amazonaws.com/marketplace/2020-14-autoscaling/pyramid-autoscale-component.yaml
      Parameters:
        BaseStackName: !Ref 'AWS::StackName'
        PyramidProcess: InMemoryDB
        AMIID: !FindInMap 
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - '64'
        SubnetIds:
          - !Join 
            - ','
            - !Ref DeploymentSubnets
        WorkloadSecurityGroups:
          - !Join 
            - ','
            - - !Ref PyramidProcessesSecurityGroup
              - !Ref MountTargetSecurityGroup
        WorkloadInstanceType: !Ref IMDBInstanceType
        WorkloadNodesMaxSize: 1
        WorkloadNodesMinSize: 1
        OperatorEmail: !Ref OperatorEmail

Outputs:
  PyramidPublicURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ElasticLoadBalancer
          - DNSName
    Description: Pyramid Public URL
  PublicDNSName:
    Value: !GetAtt 
          - ElasticLoadBalancer
          - DNSName
    Description: Instance Public DNS name
  VPC:
    Value: !Ref VPCID
    Description: VPC for deployment
  KeyPairName:
    Value: !Ref KeyPairName
    Description: Key Pair for instances
  WebAccessSecurityGroup:
    Value: !Ref WebAccessSecurityGroup
    Description: Security Group for Pyramid instances' Web access
  PyramidProcessesSecurityGroup:
    Value: !Ref PyramidProcessesSecurityGroup
    Description: Security Group for Pyramid instances' internal communication
  PyramidRole:
    Value: !Ref PyramidRole
    Description: IAM Role for instances launched from this stack
  PyramidInstanceProfile:
    Value: !Ref PyramidInstanceProfile
    Description: IAM Instance Profile for instances launched from this stack
  MountTargetSecurityGroup:
    Value: !Ref MountTargetSecurityGroup
    Description: Security Group for EFS Mount Targets
  SharedFileSystem:
    Value: !Ref SharedFileSystem
    Description: EFS file system ID for the shared file system across the deployment
  RepositoryDatabaseType:
    Value: !Ref RDSType
    Description: Repository database type
  RepositoryDatabaseAddress:
    Value: !Ref RDSAddress
    Description: Repository database address
  RepositoryDatabasePort:
    Value: !Ref RDSPort
    Description: Repository database port
  RepositoryDatabaseUsername:
    Value: !Ref RDSUser
    Description: Repository database user name
  RepositoryDatabasePasswordARN:
    Value: !Ref RDSPasswordSecret
    Description: RDS Password in Secrets Manager
  RepositoryDatabaseName:
    Value: !Ref RDSName
    Description: Repository database schema name
  InitialUsername:
    Value: !Ref InitialUsername
    Description: Initial Pyramid user name
  InitialUserPasswordARN:
    Value: !Ref InitialUserPasswordSecret
    Description: Initial Pyramid user password in Secrets Manager

