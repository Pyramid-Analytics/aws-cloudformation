AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This workload template deploys an Application Load Balancer, 2 (Everything - IMDB)
  instances and an IMDB instance. Because we are launching from AWS Marketplace AMIs,
  which are limited to Standard Edition, we need to launch from a Central instance that
  has had an Enterprise license deployed to it.

  Central instance first, then run this template to add on.
  Kill Central instance. What if there are add on instances?
  Copy Resoources, SSM and Secrets?

  Nah! need a way to add the license in as part of the initialization of the cluster!

  2 Everything - IMDB: auto-scaled, ALB
  1 IMDB

  Am able to restore a backup on creation.

  **WARNING** This template creates EC2 instances and related
  resources. You will be billed for the AWS resources used if you create a stack
  from this template. (qs-1puat849f)
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Common instance and auto scaling configuration
        Parameters:
          - BaseStackName
          - VPCID
          - OperatorEmail
      - Label:
          default: Load Balancer configuration
        Parameters:
          - LoadBalancerSubnets
          - LoadBalancerInternetFacing
          - LoadBalancerPublic
          - HTTPAccessCIDR
      - Label:
          default: Pyramid auto scaling group configuration
        Parameters:
          - DeploymentSubnets
          - BackendProcessesInstanceType
    ParameterLabels:
      BsaeStackName:
        default: CloudFormation stack to attach to
      VPCID:
        default: VPC ID
      OperatorEmail:
        default: Operator email address
      LoadBalancerSubnets:
        default: Load balancer subnets
      LoadBalancerPublic:
        default: Load Balancer Available on Public Internet?
      LoadBalancerInternetFacing:
        default: Is the load balancer exposed to the public internet?
      HTTPAccessCIDR:
        default: HTTP/HTTPS CIDR
      BackendProcessesInstanceType:
        default: Instance type for main engine instances
      DeploymentSubnets:
        default: Engine deployment subnets
      IMDBInstanceType:
        default: Instance type for IMDB instances
      DoInitializeRepository:
        default: Initialize the Pyramid Repository database
      RDSType:
        default: Database type
      RDSAddress:
        default: RDS repository database address
      RDSPort:
        default: Repository RDS database port
      RDSUser:
        default: Repository RDS database user name
      RDSPassword:
        default: Repository RDS database password
      RDSName:
        default: Repository database name on server
      InitialUsername:
        default: Initial Pyramid user name
      InitialUserPassword:
        default: Initial Pyramid User password
      BackupS3BucketAndFolder:
        default: S3 path to a Pyramid backup
Parameters:
  BaseStackName:
    Description: Base StackName this stack is a part of
    Type: String
    MinLength: '1'
    MaxLength: '32'
    AllowedPattern: '[-_a-zA-Z0-9]*'
    ConstraintDescription: Required
  VPCID:
    Description: ID of your existing VPC for deployment.
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: Required
  OperatorEmail:
    Description: >-
      (Optional) Email address that notifications of any scaling operations will
      be sent to.
    Type: String
    AllowedPattern: >-
      (([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?))||(^$)
    ConstraintDescription: Must be a valid email address.
  LoadBalancerSubnets:
    Description: >-
      Subnets for load balancer
    Type: 'List<AWS::EC2::Subnet::Id>'
  LoadBalancerInternetFacing:
    Description: >-
      Load Balancer is exposed to public Internet
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Required
  HTTPAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: >-
      Allowed CIDR block for HTTP and HTTPS traffic. Please set CIDR to
      x.x.x.x/32 to allow one specific IP address access, 0.0.0.0/0 to allow all
      IP addresses access, or another CIDR range.
    Type: String
    MinLength: '9'
  DeploymentSubnets:
    Description: >-
      Subnets for other engine instances
    Type: 'List<AWS::EC2::Subnet::Id>'
  BackendProcessesInstanceType:
    Description: >-
      Amazon EC2 instance type for the Pyramid instances.
      Has to be available for the deployment region.
    Type: String
    AllowedValues:
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.12xlarge
      - c5a.16xlarge
      - c5a.24xlarge
      - c5ad.2xlarge
      - c5ad.4xlarge
      - c5ad.8xlarge
      - c5ad.12xlarge
      - c5ad.16xlarge
      - c5ad.24xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.12xlarge
      - c5d.18xlarge
      - c5d.24xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.8xlarge
      - m5ad.12xlarge
      - m5ad.16xlarge
      - m5ad.24xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - m5dn.2xlarge
      - m5dn.4xlarge
      - m5dn.8xlarge
      - m5dn.12xlarge
      - m5dn.16xlarge
      - m5dn.24xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - m5n.16xlarge
      - m5n.24xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.8xlarge
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - r5ad.2xlarge
      - r5ad.4xlarge
      - r5ad.8xlarge
      - r5ad.12xlarge
      - r5ad.16xlarge
      - r5ad.24xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - r5dn.2xlarge
      - r5dn.4xlarge
      - r5dn.8xlarge
      - r5dn.12xlarge
      - r5dn.16xlarge
      - r5dn.24xlarge
      - r5n.2xlarge
      - r5n.4xlarge
      - r5n.8xlarge
      - r5n.12xlarge
      - r5n.16xlarge
      - r5n.24xlarge
      - t3.2xlarge
      - t3a.2xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
    Default: c5.2xlarge
    ConstraintDescription: Must contain valid instance type.
Mappings:
  AWSAMIRegionMap:
    us-east-1:
      # 2020.14.035 - autoscaling
      #'64': ami-0bc27a356344f2352
      # 2020.15.046
      '64': ami-09659d5dd77b8f212
    us-east-2:
      '64': XXX
    us-west-1:
      '64': XXX
    us-west-2:
      '64': XXX
    ca-central-1:
      '64': XXX
    eu-central-1:
      '64': XXX
    eu-west-1:
      '64': XXX
    eu-west-2:
      '64': XXX
    eu-west-3:
      '64': XXX
    eu-north-1:
      '64': XXX
    ap-southeast-1:
      '64': XXX
    ap-southeast-2:
      '64': XXX
    ap-south-1:
      '64': XXX
    ap-northeast-1:
      '64': XXX
    ap-northeast-2:
      '64': XXX
    sa-east-1:
      '64': XXX
    us-gov-east-1:
      '64': XXX
    us-gov-west-1:
      '64': XXX
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the same VPC
Conditions:
  LoadBalancerIsInternet: !Equals
    - !Ref LoadBalancerInternetFacing
    - 'true'

Resources:

  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !Ref LoadBalancerSubnets
      SecurityGroups:
        - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/WebAccessSecurityGroup:1}}'
      Type: application
      Scheme: !If
        - LoadBalancerIsInternet
        - 'internet-facing' 
        - 'internal'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '600'

  ELBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    # DependsOn: ElasticLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: /
      HealthCheckPort: 8181
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8181
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 10
      VpcId: !Ref VPCID

  ELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: '80'
      Protocol: HTTP

  WebEngineIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt
        - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/PyramidProcessesSecurityGroup:1}}'
        - GroupId
      IpProtocol: tcp
      FromPort: 8181
      ToPort: 8181
      SourceSecurityGroupId: !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/WebAccessSecurityGroup:1}}'

  EngineAutoScalingGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: >-
        https://pyramid-cloudformation.s3.amazonaws.com/marketplace/2020-15/pyramid-autoscale-instances.yaml
      Parameters:
        BaseStackName: !Ref BaseStackName
        PyramidProcess: EverythingExceptInMemoryDB
        InstancePurpose: LoadBalanceEverything
        AMIID: !FindInMap 
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - '64'
        SubnetIds: !Join 
          - ','
          - !Ref DeploymentSubnets
        WorkloadSecurityGroups: !Join 
          - ','
          - - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/PyramidProcessesSecurityGroup:1}}'
            - !Sub '{{resolve:ssm:/Pyramid/${BaseStackName}/MountTargetSecurityGroup:1}}'
        InstanceType: !Ref BackendProcessesInstanceType
        WorkloadNodesMaxSize: '2'
        WorkloadNodesMinSize: '2'
        WorkloadNodesDesiredCapacity: '2'
        TargetGroupARN: !Ref ELBTargetGroup
        OperatorEmail: !Ref OperatorEmail

Outputs:
  PyramidPublicURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ElasticLoadBalancer
          - DNSName
    Description: Pyramid Public URL
  PublicDNSName:
    Value: !GetAtt 
          - ElasticLoadBalancer
          - DNSName
    Description: Instance Public DNS name
  VPC:
    Value: !Ref VPCID
    Description: VPC for deployment
